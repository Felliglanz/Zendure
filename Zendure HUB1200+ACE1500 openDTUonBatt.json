[
    {
        "id": "27076a40bd20d054",
        "type": "subflow",
        "name": "Werte fÃ¼r SOC",
        "info": "",
        "category": "",
        "in": [],
        "out": [
            {
                "x": 1200,
                "y": 180,
                "wires": [
                    {
                        "id": "d5b8ea136781e275",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "acf3ebd427322017",
        "type": "inject",
        "z": "27076a40bd20d054",
        "name": "Alle 10 Sekunden",
        "props": [],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 230,
        "y": 200,
        "wires": [
            [
                "f13bbfd0d6114fc4",
                "be1af492220d26a5",
                "8b85b7aa837f1008",
                "44d8230cf31b81b8",
                "067e9c4de62331d0",
                "e10673ca60eb6599",
                "0976257b1490519a",
                "d93284df09a62e23",
                "01dea6087399459d",
                "8e2b7c960bc64487"
            ]
        ]
    },
    {
        "id": "f13bbfd0d6114fc4",
        "type": "ioBroker get",
        "z": "27076a40bd20d054",
        "name": "minVol #1",
        "topic": "zendure-solarflow.0.73bkTV.device-key.packData.pack-serial.minVol",
        "attrname": "payload",
        "payloadType": "value",
        "errOnInvalidState": "nothing",
        "x": 460,
        "y": 80,
        "wires": [
            [
                "adb19af001dc28ec"
            ]
        ]
    },
    {
        "id": "be1af492220d26a5",
        "type": "ioBroker get",
        "z": "27076a40bd20d054",
        "name": "maxVol #1",
        "topic": "zendure-solarflow.0.73bkTV.device-key.packData.pack-serial.maxVol",
        "attrname": "payload",
        "payloadType": "value",
        "errOnInvalidState": "nothing",
        "x": 470,
        "y": 120,
        "wires": [
            [
                "adb19af001dc28ec"
            ]
        ]
    },
    {
        "id": "01dea6087399459d",
        "type": "ioBroker get",
        "z": "27076a40bd20d054",
        "name": "Akku Eingang",
        "topic": "zendure-solarflow.0.73bkTV.device-key.outputPackPower",
        "attrname": "payload",
        "payloadType": "value",
        "errOnInvalidState": "nothing",
        "x": 480,
        "y": 420,
        "wires": [
            [
                "adb19af001dc28ec"
            ]
        ]
    },
    {
        "id": "8e2b7c960bc64487",
        "type": "ioBroker get",
        "z": "27076a40bd20d054",
        "name": "Akku Ausgang",
        "topic": "zendure-solarflow.0.73bkTV.device-key.packInputPower",
        "attrname": "payload",
        "payloadType": "value",
        "errOnInvalidState": "nothing",
        "x": 480,
        "y": 460,
        "wires": [
            [
                "adb19af001dc28ec"
            ]
        ]
    },
    {
        "id": "8b85b7aa837f1008",
        "type": "ioBroker get",
        "z": "27076a40bd20d054",
        "name": "minVol #2",
        "topic": "zendure-solarflow.0.73bkTV.device-key.packData.pack-serial.minVol",
        "attrname": "payload",
        "payloadType": "value",
        "errOnInvalidState": "nothing",
        "x": 460,
        "y": 160,
        "wires": [
            [
                "adb19af001dc28ec"
            ]
        ]
    },
    {
        "id": "44d8230cf31b81b8",
        "type": "ioBroker get",
        "z": "27076a40bd20d054",
        "name": "maxVol #2",
        "topic": "zendure-solarflow.0.73bkTV.device-key.packData.pack-serial.maxVol",
        "attrname": "payload",
        "payloadType": "value",
        "errOnInvalidState": "nothing",
        "x": 470,
        "y": 200,
        "wires": [
            [
                "adb19af001dc28ec"
            ]
        ]
    },
    {
        "id": "067e9c4de62331d0",
        "type": "ioBroker get",
        "z": "27076a40bd20d054",
        "name": "minVol #3",
        "topic": "zendure-solarflow.0.73bkTV.device-key.packData.pack-serial.minVol",
        "attrname": "payload",
        "payloadType": "value",
        "errOnInvalidState": "nothing",
        "x": 460,
        "y": 240,
        "wires": [
            [
                "adb19af001dc28ec"
            ]
        ]
    },
    {
        "id": "e10673ca60eb6599",
        "type": "ioBroker get",
        "z": "27076a40bd20d054",
        "name": "maxVol #3",
        "topic": "zendure-solarflow.0.73bkTV.device-key.packData.pack-serial.maxVol",
        "attrname": "payload",
        "payloadType": "value",
        "errOnInvalidState": "nothing",
        "x": 470,
        "y": 280,
        "wires": [
            [
                "adb19af001dc28ec"
            ]
        ]
    },
    {
        "id": "0976257b1490519a",
        "type": "ioBroker get",
        "z": "27076a40bd20d054",
        "name": "minVol #4",
        "topic": "zendure-solarflow.0.73bkTV.device-key.packData.pack-serial.minVol",
        "attrname": "payload",
        "payloadType": "value",
        "errOnInvalidState": "nothing",
        "x": 460,
        "y": 320,
        "wires": [
            [
                "adb19af001dc28ec"
            ]
        ]
    },
    {
        "id": "d93284df09a62e23",
        "type": "ioBroker get",
        "z": "27076a40bd20d054",
        "name": "maxVol #4",
        "topic": "zendure-solarflow.0.73bkTV.device-key.packData.pack-serial.maxVol",
        "attrname": "payload",
        "payloadType": "value",
        "errOnInvalidState": "nothing",
        "x": 470,
        "y": 360,
        "wires": [
            [
                "adb19af001dc28ec"
            ]
        ]
    },
    {
        "id": "adb19af001dc28ec",
        "type": "join",
        "z": "27076a40bd20d054",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "3",
        "count": "10",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 710,
        "y": 180,
        "wires": [
            [
                "d5b8ea136781e275"
            ]
        ]
    },
    {
        "id": "d5b8ea136781e275",
        "type": "function",
        "z": "27076a40bd20d054",
        "name": "Topics zuweisen und object kreieren",
        "func": "// Input/Output korrigieren (laut deiner Beobachtung)\nlet realInputPower = msg.payload['zendure-solarflow.0.73bkTV.device-key.outputPackPower'] || 0;\nlet realOutputPower = msg.payload['zendure-solarflow.0.73bkTV.device-key.packInputPower'] || 0;\n\n// Zellspannungen der vier Packs\nlet minVols = [\n    msg.payload['zendure-solarflow.0.73bkTV.device-key.packData.pack-serial.minVol'],\n    msg.payload['zendure-solarflow.0.73bkTV.device-key.packData.pack-serial.minVol'],\n    msg.payload['zendure-solarflow.0.73bkTV.device-key.packData.pack-serial.minVol'],\n    msg.payload['zendure-solarflow.0.73bkTV.device-key.packData.pack-serial.minVol']\n];\n\nlet maxVols = [\n    msg.payload['zendure-solarflow.0.73bkTV.device-key.packData.pack-serial.maxVol'],\n    msg.payload['zendure-solarflow.0.73bkTV.device-key.packData.pack-serial.maxVol'],\n    msg.payload['zendure-solarflow.0.73bkTV.device-key.packData.pack-serial.maxVol'],\n    msg.payload['zendure-solarflow.0.73bkTV.device-key.packData.pack-serial.maxVol']\n];\n\n// Absicherung gegen undefined\nminVols = minVols.filter(v => v !== undefined);\nmaxVols = maxVols.filter(v => v !== undefined);\n\n// Finaler Output\nmsg.payload = {\n    inputPower: realInputPower,\n    outputPower: realOutputPower,\n    lowestMinVol: Math.min(...minVols),\n    highestMaxVol: Math.min(...maxVols),\n    minVols: minVols,\n    maxVols: maxVols\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "2ee5f1be3938f82f",
        "type": "subflow",
        "name": "low_minVol an Influx",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "050365da3f218c80"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "050365da3f218c80",
        "type": "function",
        "z": "2ee5f1be3938f82f",
        "name": "low_minVol in Influx",
        "func": "// Definiere das Measurement\nconst measurement = \"low_minVol\"; // Ersetze dies durch dein gewÃ¼nschtes Measurement\n\n// ÃœberprÃ¼fen, ob der Payload ein gÃ¼ltiger Wert ist\nif (typeof msg.payload === 'number') {\n    msg.payload = [\n        {\n            _time: new Date().toISOString(), // Aktueller Zeitstempel\n            _value: msg.payload, // Setze den Wert\n            _field: \"low_minVol\", // Setze das Feld\n            _measurement: measurement // Setze das Measurement\n        }\n    ];\n} else {\n    msg.payload = [{ error: 'Invalid payload' }]; // Fehlerbehandlung\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 80,
        "wires": [
            [
                "5ce67fe20f47188f"
            ]
        ]
    },
    {
        "id": "5ce67fe20f47188f",
        "type": "influxdb out",
        "z": "2ee5f1be3938f82f",
        "influxdb": "77b430ebcf204c80",
        "name": "low_minVol",
        "measurement": "low_minVol",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "fellis-org",
        "bucket": "fellis-muellhalde",
        "x": 420,
        "y": 80,
        "wires": []
    },
    {
        "id": "77b430ebcf204c80",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "Fellis Muellhalde",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://192.168.2.127:8086",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "0314f8483689582f",
        "type": "subflow",
        "name": "GerÃ¤te schalten",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "2324a08885f77b30"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "2324a08885f77b30",
        "type": "switch",
        "z": "0314f8483689582f",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 190,
        "y": 80,
        "wires": [
            [
                "0ca769c45e782e90",
                "e1194c4492042a7d",
                "f25f4ccfa448abc6",
                "742f6bc897b52e5c"
            ]
        ]
    },
    {
        "id": "0ca769c45e782e90",
        "type": "change",
        "z": "0314f8483689582f",
        "name": "Ausgangsleistung 850W",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "850",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 80,
        "wires": [
            [
                "ab115a4fbec7d17b"
            ]
        ]
    },
    {
        "id": "e1194c4492042a7d",
        "type": "change",
        "z": "0314f8483689582f",
        "name": "AC Mode 2",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "2",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 200,
        "wires": [
            [
                "cc463552b4f1ff1a"
            ]
        ]
    },
    {
        "id": "cc463552b4f1ff1a",
        "type": "ioBroker out",
        "z": "0314f8483689582f",
        "name": "AC Modus wechseln",
        "topic": "zendure-solarflow.0.73bkTV.device-key.control.acMode",
        "ack": "false",
        "autoCreate": "false",
        "stateName": "",
        "role": "",
        "payloadType": "",
        "readonly": "",
        "stateUnit": "",
        "stateMin": "",
        "stateMax": "",
        "x": 620,
        "y": 200,
        "wires": []
    },
    {
        "id": "23d22772cbded217",
        "type": "ioBroker out",
        "z": "0314f8483689582f",
        "name": "ACE1500 Ladeleistung",
        "topic": "zendure-solarflow.0.73bkTV.device-key.control.setInputLimit",
        "ack": "false",
        "autoCreate": "false",
        "stateName": "",
        "role": "",
        "payloadType": "",
        "readonly": "",
        "stateUnit": "",
        "stateMin": "",
        "stateMax": "",
        "x": 620,
        "y": 140,
        "wires": []
    },
    {
        "id": "ab115a4fbec7d17b",
        "type": "ioBroker out",
        "z": "0314f8483689582f",
        "name": "HUB 1200 Ausgangsleistung",
        "topic": "zendure-solarflow.0.73bkTV.device-key.control.setOutputLimit",
        "ack": "false",
        "autoCreate": "false",
        "stateName": "",
        "role": "",
        "payloadType": "",
        "readonly": "",
        "stateUnit": "",
        "stateMin": "",
        "stateMax": "",
        "x": 640,
        "y": 80,
        "wires": []
    },
    {
        "id": "f25f4ccfa448abc6",
        "type": "change",
        "z": "0314f8483689582f",
        "name": "ACE Ladeleistung 0W",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 140,
        "wires": [
            [
                "23d22772cbded217"
            ]
        ]
    },
    {
        "id": "7375695edffffbdd",
        "type": "ioBroker out",
        "z": "0314f8483689582f",
        "name": "DPL 0/2",
        "topic": "mqtt.0.OpenDTU.powerlimiter.cmd.mode",
        "ack": "false",
        "autoCreate": "false",
        "stateName": "",
        "role": "",
        "payloadType": "",
        "readonly": "",
        "stateUnit": "",
        "stateMin": "",
        "stateMax": "",
        "x": 580,
        "y": 260,
        "wires": []
    },
    {
        "id": "742f6bc897b52e5c",
        "type": "change",
        "z": "0314f8483689582f",
        "name": "DPL Mode 0",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 260,
        "wires": [
            [
                "7375695edffffbdd"
            ]
        ]
    },
    {
        "id": "2bfa25a03b1cef8a",
        "type": "subflow",
        "name": "Zendure Stop",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 100,
                "wires": [
                    {
                        "id": "206e93dffe84bb99"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 520,
                "y": 100,
                "wires": [
                    {
                        "id": "dc089ea1486e801a",
                        "port": 0
                    },
                    {
                        "id": "9bd15293991e6aa9",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "206e93dffe84bb99",
        "type": "switch",
        "z": "2bfa25a03b1cef8a",
        "name": "True oder False",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 220,
        "y": 100,
        "wires": [
            [
                "dc089ea1486e801a"
            ],
            [
                "9bd15293991e6aa9"
            ]
        ]
    },
    {
        "id": "9bd15293991e6aa9",
        "type": "change",
        "z": "2bfa25a03b1cef8a",
        "name": "Gate auf",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "dc089ea1486e801a",
        "type": "change",
        "z": "2bfa25a03b1cef8a",
        "name": "Gate zu",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "c40c1e43832f39ef",
        "type": "subflow",
        "name": "DPL Mode",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "177ee8f3d9c4c780"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 500,
            "y": 140,
            "wires": [
                {
                    "id": "79ef86188b9ddbf9",
                    "port": 0
                },
                {
                    "id": "89fd4e23d9c9fa95",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "177ee8f3d9c4c780",
        "type": "switch",
        "z": "c40c1e43832f39ef",
        "name": "true/false",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 200,
        "y": 100,
        "wires": [
            [
                "79ef86188b9ddbf9"
            ],
            [
                "89fd4e23d9c9fa95"
            ]
        ]
    },
    {
        "id": "79ef86188b9ddbf9",
        "type": "change",
        "z": "c40c1e43832f39ef",
        "name": "DPL Mode 2",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "2",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 80,
        "wires": [
            [
                "74180cd5d3481d8a"
            ]
        ]
    },
    {
        "id": "89fd4e23d9c9fa95",
        "type": "change",
        "z": "c40c1e43832f39ef",
        "name": "DPL Mode 0",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 120,
        "wires": [
            [
                "74180cd5d3481d8a"
            ]
        ]
    },
    {
        "id": "74180cd5d3481d8a",
        "type": "ioBroker out",
        "z": "c40c1e43832f39ef",
        "name": "DPL 0/2",
        "topic": "mqtt.0.OpenDTU.powerlimiter.cmd.mode",
        "ack": "false",
        "autoCreate": "false",
        "stateName": "",
        "role": "",
        "payloadType": "",
        "readonly": "",
        "stateUnit": "",
        "stateMin": "",
        "stateMax": "",
        "x": 600,
        "y": 80,
        "wires": []
    },
    {
        "id": "b796476a5ea03c56",
        "type": "mqtt-broker",
        "z": "c40c1e43832f39ef",
        "name": "EMQX-MQTT",
        "broker": "192.168.2.194",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "cb8e7ad27a351884",
        "type": "subflow",
        "name": "Werte holen",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 240,
                "y": 360,
                "wires": [
                    {
                        "id": "1d2940997e5b6820"
                    },
                    {
                        "id": "5c07ed79c6901b3f"
                    },
                    {
                        "id": "2784ca852f8099c7"
                    },
                    {
                        "id": "257f159c8416bb90"
                    },
                    {
                        "id": "8bbc820c6a7e8dc8"
                    },
                    {
                        "id": "f2ce3cbfe96f7244"
                    },
                    {
                        "id": "a18c5940a043d497"
                    },
                    {
                        "id": "39e8b3b6a9b01fbb"
                    },
                    {
                        "id": "15384546db488a31"
                    },
                    {
                        "id": "be85319b34423d05"
                    },
                    {
                        "id": "da0aeb20ceafedae"
                    },
                    {
                        "id": "8fc131072d6a49ae"
                    },
                    {
                        "id": "1020c7b0b5adf754"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1040,
                "y": 360,
                "wires": [
                    {
                        "id": "43caeb47f2525d5c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "1d2940997e5b6820",
        "type": "ioBroker get",
        "z": "cb8e7ad27a351884",
        "name": "batteryLevel",
        "topic": "zendure-solarflow.0.73bkTV.device-key.electricLevel",
        "attrname": "payload",
        "payloadType": "value",
        "errOnInvalidState": "nothing",
        "x": 450,
        "y": 100,
        "wires": [
            [
                "6434bd58bff5e18f"
            ]
        ]
    },
    {
        "id": "2784ca852f8099c7",
        "type": "ioBroker get",
        "z": "cb8e7ad27a351884",
        "name": "sunsetTimestamp",
        "topic": "shuttercontrol.0.info.GoldenHour",
        "attrname": "payload",
        "payloadType": "value",
        "errOnInvalidState": "nothing",
        "x": 470,
        "y": 220,
        "wires": [
            [
                "a00b24d7605041d5"
            ]
        ]
    },
    {
        "id": "8bd3df544f930d0b",
        "type": "comment",
        "z": "cb8e7ad27a351884",
        "name": "Werte auslesen",
        "info": "",
        "x": 460,
        "y": 60,
        "wires": []
    },
    {
        "id": "257f159c8416bb90",
        "type": "ioBroker get",
        "z": "cb8e7ad27a351884",
        "name": "sunriseTimestamp",
        "topic": "0_userdata.0.PV-Daten.GoldenHourEnd+90",
        "attrname": "payload",
        "payloadType": "value",
        "errOnInvalidState": "nothing",
        "x": 470,
        "y": 280,
        "wires": [
            [
                "6bda0a89dae4fef9"
            ]
        ]
    },
    {
        "id": "8bbc820c6a7e8dc8",
        "type": "ioBroker get",
        "z": "cb8e7ad27a351884",
        "name": "Aktuelle Leistung BKW",
        "topic": "zendure-solarflow.0.73bkTV.device-key.solarInputPower",
        "attrname": "payload",
        "payloadType": "value",
        "errOnInvalidState": "nothing",
        "x": 480,
        "y": 340,
        "wires": [
            [
                "a69d6cb6f383fede"
            ]
        ]
    },
    {
        "id": "f2ce3cbfe96f7244",
        "type": "ioBroker get",
        "z": "cb8e7ad27a351884",
        "name": "Zustand AC Modus",
        "topic": "zendure-solarflow.0.73bkTV.device-key.control.acMode",
        "attrname": "payload",
        "payloadType": "value",
        "errOnInvalidState": "nothing",
        "x": 470,
        "y": 400,
        "wires": [
            [
                "266f98012459d10f"
            ]
        ]
    },
    {
        "id": "a18c5940a043d497",
        "type": "ioBroker get",
        "z": "cb8e7ad27a351884",
        "name": "Aktuelle AC Leistung",
        "topic": "zendure-solarflow.0.73bkTV.device-key.inputLimit",
        "attrname": "payload",
        "payloadType": "value",
        "errOnInvalidState": "nothing",
        "x": 480,
        "y": 460,
        "wires": [
            [
                "91ca6bb30b4a77fc"
            ]
        ]
    },
    {
        "id": "5c07ed79c6901b3f",
        "type": "ioBroker get",
        "z": "cb8e7ad27a351884",
        "name": "Aktuelle Leistung",
        "topic": "sonoff.0.Stromzaehler.MT691_P",
        "attrname": "payload",
        "payloadType": "value",
        "errOnInvalidState": "nothing",
        "x": 470,
        "y": 160,
        "wires": [
            [
                "a8e623aaf94dd4c8"
            ]
        ]
    },
    {
        "id": "39e8b3b6a9b01fbb",
        "type": "ioBroker get",
        "z": "cb8e7ad27a351884",
        "name": "SOC #1",
        "topic": "zendure-solarflow.0.73bkTV.device-key.packData.pack-serial.socLevel",
        "attrname": "payload",
        "payloadType": "value",
        "errOnInvalidState": "nothing",
        "x": 440,
        "y": 520,
        "wires": [
            [
                "28b689426e1c622a"
            ]
        ]
    },
    {
        "id": "15384546db488a31",
        "type": "ioBroker get",
        "z": "cb8e7ad27a351884",
        "name": "SOC #2",
        "topic": "zendure-solarflow.0.73bkTV.device-key.packData.pack-serial.socLevel",
        "attrname": "payload",
        "payloadType": "value",
        "errOnInvalidState": "nothing",
        "x": 440,
        "y": 580,
        "wires": [
            [
                "4225c45229f162ff"
            ]
        ]
    },
    {
        "id": "be85319b34423d05",
        "type": "ioBroker get",
        "z": "cb8e7ad27a351884",
        "name": "SOC #3",
        "topic": "zendure-solarflow.0.73bkTV.device-key.packData.pack-serial.socLevel",
        "attrname": "payload",
        "payloadType": "value",
        "errOnInvalidState": "nothing",
        "x": 440,
        "y": 640,
        "wires": [
            [
                "dc1b1613a9608a52"
            ]
        ]
    },
    {
        "id": "6434bd58bff5e18f",
        "type": "function",
        "z": "cb8e7ad27a351884",
        "name": "Message",
        "func": "msg.topic = \"batteryLevel\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 100,
        "wires": [
            [
                "43caeb47f2525d5c"
            ]
        ]
    },
    {
        "id": "a8e623aaf94dd4c8",
        "type": "function",
        "z": "cb8e7ad27a351884",
        "name": "Message",
        "func": "msg.topic = \"currentPower\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 160,
        "wires": [
            [
                "43caeb47f2525d5c"
            ]
        ]
    },
    {
        "id": "a00b24d7605041d5",
        "type": "function",
        "z": "cb8e7ad27a351884",
        "name": "Message",
        "func": "msg.topic = \"sunsetTimestamp\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 220,
        "wires": [
            [
                "43caeb47f2525d5c"
            ]
        ]
    },
    {
        "id": "6bda0a89dae4fef9",
        "type": "function",
        "z": "cb8e7ad27a351884",
        "name": "Message",
        "func": "msg.topic = \"sunriseTimestamp\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 280,
        "wires": [
            [
                "43caeb47f2525d5c"
            ]
        ]
    },
    {
        "id": "99923f82b33b0383",
        "type": "comment",
        "z": "cb8e7ad27a351884",
        "name": "Topic an msg ",
        "info": "",
        "x": 730,
        "y": 60,
        "wires": []
    },
    {
        "id": "a69d6cb6f383fede",
        "type": "function",
        "z": "cb8e7ad27a351884",
        "name": "Message",
        "func": "msg.topic = \"PV_Power\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 340,
        "wires": [
            [
                "43caeb47f2525d5c"
            ]
        ]
    },
    {
        "id": "266f98012459d10f",
        "type": "function",
        "z": "cb8e7ad27a351884",
        "name": "Message",
        "func": "msg.topic = \"switchState\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 400,
        "wires": [
            [
                "43caeb47f2525d5c"
            ]
        ]
    },
    {
        "id": "91ca6bb30b4a77fc",
        "type": "function",
        "z": "cb8e7ad27a351884",
        "name": "Message",
        "func": "msg.topic = \"AC_Power\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 460,
        "wires": [
            [
                "43caeb47f2525d5c"
            ]
        ]
    },
    {
        "id": "28b689426e1c622a",
        "type": "function",
        "z": "cb8e7ad27a351884",
        "name": "Message",
        "func": "msg.topic = \"SOC_1\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 520,
        "wires": [
            [
                "43caeb47f2525d5c"
            ]
        ]
    },
    {
        "id": "4225c45229f162ff",
        "type": "function",
        "z": "cb8e7ad27a351884",
        "name": "Message",
        "func": "msg.topic = \"SOC_2\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 580,
        "wires": [
            [
                "43caeb47f2525d5c"
            ]
        ]
    },
    {
        "id": "dc1b1613a9608a52",
        "type": "function",
        "z": "cb8e7ad27a351884",
        "name": "Message",
        "func": "msg.topic = \"SOC_3\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 640,
        "wires": [
            [
                "43caeb47f2525d5c"
            ]
        ]
    },
    {
        "id": "43caeb47f2525d5c",
        "type": "join",
        "z": "cb8e7ad27a351884",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "6",
        "count": "13",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 930,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "77f5d8533313fa75",
        "type": "comment",
        "z": "cb8e7ad27a351884",
        "name": "Zusammenfassen der msg",
        "info": "",
        "x": 990,
        "y": 320,
        "wires": []
    },
    {
        "id": "da0aeb20ceafedae",
        "type": "ioBroker get",
        "z": "cb8e7ad27a351884",
        "name": "Zellspannung minVol",
        "topic": "0_userdata.0.Zendure_Werte.minVol",
        "attrname": "payload",
        "payloadType": "value",
        "errOnInvalidState": "nothing",
        "x": 480,
        "y": 760,
        "wires": [
            [
                "8398cbe018d3a941"
            ]
        ]
    },
    {
        "id": "8398cbe018d3a941",
        "type": "function",
        "z": "cb8e7ad27a351884",
        "name": "Message",
        "func": "msg.topic = \"minVol\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 760,
        "wires": [
            [
                "43caeb47f2525d5c"
            ]
        ]
    },
    {
        "id": "8fc131072d6a49ae",
        "type": "ioBroker get",
        "z": "cb8e7ad27a351884",
        "name": "Aktuelles Output Limit",
        "topic": "zendure-solarflow.0.73bkTV.device-key.outputLimit",
        "attrname": "payload",
        "payloadType": "value",
        "errOnInvalidState": "nothing",
        "x": 480,
        "y": 820,
        "wires": [
            [
                "24981c91b47c3435"
            ]
        ]
    },
    {
        "id": "24981c91b47c3435",
        "type": "function",
        "z": "cb8e7ad27a351884",
        "name": "Message",
        "func": "msg.topic = \"OutputLimit\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 820,
        "wires": [
            [
                "43caeb47f2525d5c"
            ]
        ]
    },
    {
        "id": "1020c7b0b5adf754",
        "type": "ioBroker get",
        "z": "cb8e7ad27a351884",
        "name": "SOC #4",
        "topic": "zendure-solarflow.0.73bkTV.device-key.packData.pack-serial.socLevel",
        "attrname": "payload",
        "payloadType": "value",
        "errOnInvalidState": "nothing",
        "x": 440,
        "y": 700,
        "wires": [
            [
                "ebe3bc896a89bfff"
            ]
        ]
    },
    {
        "id": "ebe3bc896a89bfff",
        "type": "function",
        "z": "cb8e7ad27a351884",
        "name": "Message",
        "func": "msg.topic = \"SOC_4\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 700,
        "wires": [
            [
                "43caeb47f2525d5c"
            ]
        ]
    },
    {
        "id": "b974f4b386e027d4",
        "type": "subflow",
        "name": "Manueller Ladestop",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 100,
                "wires": [
                    {
                        "id": "bdcb422cea40ecc7"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 500,
                "y": 120,
                "wires": [
                    {
                        "id": "4b9a1aec176d3bc1",
                        "port": 0
                    },
                    {
                        "id": "9db50b00837e8481",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "bdcb422cea40ecc7",
        "type": "switch",
        "z": "b974f4b386e027d4",
        "name": "True oder False",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 220,
        "y": 100,
        "wires": [
            [
                "4b9a1aec176d3bc1"
            ],
            [
                "9db50b00837e8481"
            ]
        ]
    },
    {
        "id": "4b9a1aec176d3bc1",
        "type": "change",
        "z": "b974f4b386e027d4",
        "name": "Gate zu",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 80,
        "wires": [
            [
                "136b2b3ddf150b31"
            ]
        ]
    },
    {
        "id": "9db50b00837e8481",
        "type": "change",
        "z": "b974f4b386e027d4",
        "name": "Gate auf",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "136b2b3ddf150b31",
        "type": "change",
        "z": "b974f4b386e027d4",
        "name": "Laden 0 Watt",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 80,
        "wires": [
            [
                "d1f41b2512d9474a"
            ]
        ]
    },
    {
        "id": "d1f41b2512d9474a",
        "type": "ioBroker out",
        "z": "b974f4b386e027d4",
        "name": "ACE1500 Ladeleistung",
        "topic": "zendure-solarflow.0.73bkTV.device-key.control.setInputLimit",
        "ack": "false",
        "autoCreate": "false",
        "stateName": "",
        "role": "",
        "payloadType": "",
        "readonly": "",
        "stateUnit": "",
        "stateMin": "",
        "stateMax": "",
        "x": 740,
        "y": 80,
        "wires": []
    },
    {
        "id": "df31c9eddb881a7e",
        "type": "subflow",
        "name": "Manueller Entladestop",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "041615f445e2b987"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 440,
                "y": 100,
                "wires": [
                    {
                        "id": "e35c56c7e4b6e801",
                        "port": 0
                    },
                    {
                        "id": "b9e810ee85c059a9",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "041615f445e2b987",
        "type": "switch",
        "z": "df31c9eddb881a7e",
        "name": "True oder False",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 160,
        "y": 80,
        "wires": [
            [
                "e35c56c7e4b6e801"
            ],
            [
                "b9e810ee85c059a9"
            ]
        ]
    },
    {
        "id": "e35c56c7e4b6e801",
        "type": "change",
        "z": "df31c9eddb881a7e",
        "name": "Gate zu",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 60,
        "wires": [
            [
                "87a7238dfbebc0a2"
            ]
        ]
    },
    {
        "id": "b9e810ee85c059a9",
        "type": "change",
        "z": "df31c9eddb881a7e",
        "name": "Gate auf",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "87a7238dfbebc0a2",
        "type": "change",
        "z": "df31c9eddb881a7e",
        "name": "Ausgang 0 Watt",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 60,
        "wires": [
            [
                "5da5407cf1648e76"
            ]
        ]
    },
    {
        "id": "5da5407cf1648e76",
        "type": "ioBroker out",
        "z": "df31c9eddb881a7e",
        "name": "HUB1200 Ausgangsleistung",
        "topic": "zendure-solarflow.0.73bkTV.device-key.control.setOutputLimit",
        "ack": "false",
        "autoCreate": "false",
        "stateName": "",
        "role": "",
        "payloadType": "",
        "readonly": "",
        "stateUnit": "",
        "stateMin": "",
        "stateMax": "",
        "x": 720,
        "y": 60,
        "wires": []
    },
    {
        "id": "932e289992721e7b",
        "type": "subflow",
        "name": "Manuelles Notladen",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 120,
                "wires": [
                    {
                        "id": "970bad02a11329ad"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 540,
                "y": 260,
                "wires": [
                    {
                        "id": "db329826b34dda5d",
                        "port": 0
                    },
                    {
                        "id": "996a56b763e25a4c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "970bad02a11329ad",
        "type": "switch",
        "z": "932e289992721e7b",
        "name": "True oder False",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 220,
        "y": 120,
        "wires": [
            [
                "996a56b763e25a4c"
            ],
            [
                "db329826b34dda5d"
            ]
        ]
    },
    {
        "id": "db329826b34dda5d",
        "type": "change",
        "z": "932e289992721e7b",
        "name": "Gate auf",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "996a56b763e25a4c",
        "type": "change",
        "z": "932e289992721e7b",
        "name": "Gate zu",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 100,
        "wires": [
            [
                "1c8484ca38d9559f",
                "ff84d7baa485d7df",
                "76b235dc51c09b1a"
            ]
        ]
    },
    {
        "id": "1c8484ca38d9559f",
        "type": "change",
        "z": "932e289992721e7b",
        "name": "Entladen 0 Watt",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 80,
        "wires": [
            [
                "5c0587c71c3d626a"
            ]
        ],
        "outputLabels": [
            "2"
        ]
    },
    {
        "id": "5c0587c71c3d626a",
        "type": "ioBroker out",
        "z": "932e289992721e7b",
        "name": "HUB1200 Ausgang",
        "topic": "zendure-solarflow.0.73bkTV.device-key.control.setOutputLimit",
        "ack": "false",
        "autoCreate": "false",
        "stateName": "",
        "role": "",
        "payloadType": "",
        "readonly": "",
        "stateUnit": "",
        "stateMin": "",
        "stateMax": "",
        "x": 910,
        "y": 80,
        "wires": []
    },
    {
        "id": "ff84d7baa485d7df",
        "type": "change",
        "z": "932e289992721e7b",
        "name": "Laden 900 Watt",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "900",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 200,
        "wires": [
            [
                "edb58689b77ef973"
            ]
        ],
        "outputLabels": [
            "2"
        ]
    },
    {
        "id": "c43ff3fb9c40c875",
        "type": "ioBroker out",
        "z": "932e289992721e7b",
        "name": "ACE1500 Eingang",
        "topic": "zendure-solarflow.0.73bkTV.device-key.control.setInputLimit",
        "ack": "false",
        "autoCreate": "false",
        "stateName": "",
        "role": "",
        "payloadType": "",
        "readonly": "",
        "stateUnit": "",
        "stateMin": "",
        "stateMax": "",
        "x": 910,
        "y": 200,
        "wires": []
    },
    {
        "id": "76b235dc51c09b1a",
        "type": "change",
        "z": "932e289992721e7b",
        "name": "AC Switch auf 1",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 140,
        "wires": [
            [
                "b30d3e67e772114e"
            ]
        ]
    },
    {
        "id": "50a485ba1dc1a832",
        "type": "ioBroker out",
        "z": "932e289992721e7b",
        "name": "AC Switch",
        "topic": "zendure-solarflow.0.73bkTV.device-key.control.acMode",
        "ack": "false",
        "autoCreate": "false",
        "stateName": "",
        "role": "",
        "payloadType": "",
        "readonly": "",
        "stateUnit": "",
        "stateMin": "",
        "stateMax": "",
        "x": 890,
        "y": 140,
        "wires": []
    },
    {
        "id": "b30d3e67e772114e",
        "type": "delay",
        "z": "932e289992721e7b",
        "name": "10s",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 750,
        "y": 140,
        "wires": [
            [
                "50a485ba1dc1a832"
            ]
        ]
    },
    {
        "id": "edb58689b77ef973",
        "type": "delay",
        "z": "932e289992721e7b",
        "name": "10s",
        "pauseType": "delay",
        "timeout": "20",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 750,
        "y": 200,
        "wires": [
            [
                "c43ff3fb9c40c875"
            ]
        ]
    },
    {
        "id": "a6d6182e67d93116",
        "type": "tab",
        "label": "Zendure mit open DTU",
        "disabled": false,
        "locked": true,
        "info": "",
        "env": []
    },
    {
        "id": "5c33c43d92038f2a",
        "type": "group",
        "z": "a6d6182e67d93116",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "ede627999709f18e",
            "5ef458cae7ba2e30",
            "d1a54fb3f544b743",
            "1b97ad0cfbd02436",
            "02d059373af9e698",
            "8e5c847979ab5573",
            "c7ebb93eb95ae7f9",
            "b08aac420c404783"
        ],
        "x": 874,
        "y": 139,
        "w": 572,
        "h": 202
    },
    {
        "id": "fdec1a84381bfe22",
        "type": "group",
        "z": "a6d6182e67d93116",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "3672069f5bed1b1a",
            "cc8e4208561fea4b",
            "a23aa6813ef3e423",
            "638ac4107189b017",
            "56dc614b65914acb",
            "89b65f7936ac8c5b",
            "a9da176d0dcdfe61",
            "15101eb5c417693f",
            "4a05a5e75771c60a",
            "7ad6552b84970a12",
            "63d3a3c2e894a4f5",
            "0f9822042dbc2bc7",
            "ce0ea9008fc155c3",
            "66de9be590acdaee",
            "8ec8ebccb52cbcf3",
            "78399e348d7af107",
            "cde594aede70a1ff",
            "ba071f7f45abd274",
            "be1514fe0fd56b6e",
            "66708db013b73317"
        ],
        "x": 34,
        "y": 819,
        "w": 972,
        "h": 342
    },
    {
        "id": "16855b68d2ba3edc",
        "type": "group",
        "z": "a6d6182e67d93116",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "fa9c8af3e8164f5a",
            "8aaa5fa7994b8902",
            "de9d9a7f96b9a0b0",
            "c54cefd6af96915f",
            "75c4f11a921b0d2c",
            "2a992f91ddb25702",
            "b5ea0e7198b01863"
        ],
        "x": 984,
        "y": 499,
        "w": 342,
        "h": 262
    },
    {
        "id": "1b7c1e9684985143",
        "type": "group",
        "z": "a6d6182e67d93116",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "aac8615345d74e74",
            "d8bbd70eda432690",
            "ca3e9208479a3c38",
            "cfb34b4b6c2968cb",
            "8d958fadb19c64d4",
            "d68f7cc2ca756ae7",
            "9cb8ca912caf9f76",
            "53190f9a7ab96a35",
            "6fd8cc9f4e63da8a",
            "30fb2d9faa875faf",
            "2ca2e83b8ddc5fd4",
            "f448b1437badd8af",
            "e417cf48e6464605",
            "c90ad17b6bc9d8c2",
            "73307e1d5c274712",
            "bd6b6c380f473aa4"
        ],
        "x": 1034,
        "y": 819,
        "w": 672,
        "h": 342
    },
    {
        "id": "e967605812eb7141",
        "type": "group",
        "z": "a6d6182e67d93116",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "1c2023c176f5a2e8",
            "ab4b912ea2136add",
            "6f9e67dd7d69d22c",
            "ede212e834501182",
            "092a137a325fe911"
        ],
        "x": 34,
        "y": 139,
        "w": 422,
        "h": 122
    },
    {
        "id": "9532c2aa994c9ed4",
        "type": "group",
        "z": "a6d6182e67d93116",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "5f68144dae6241bb",
            "ceee78f3347c3334",
            "d66724bb8b7ac7f5",
            "9f10f3863ebe0905",
            "ecf677a62347a114",
            "1b9438cedb154727",
            "d6f4855f6c171704",
            "65ef7ab1789596a9",
            "d1b511127a269d86",
            "1452c531c66ce676"
        ],
        "x": 34,
        "y": 499,
        "w": 522,
        "h": 282
    },
    {
        "id": "be20200ecedd947f",
        "type": "group",
        "z": "a6d6182e67d93116",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "678f64d519f6f511",
            "a042ee7a022ba719",
            "529ce865dfece041",
            "b18a0870d870748d"
        ],
        "x": 1754,
        "y": 199,
        "w": 482,
        "h": 142
    },
    {
        "id": "29ee38cf09bb598d",
        "type": "group",
        "z": "a6d6182e67d93116",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a466887cb4482a44",
            "7ff2a925c93d50e1",
            "f03233ccceeb6eb9",
            "f32dcb4007d8248d"
        ],
        "x": 1754,
        "y": 39,
        "w": 462,
        "h": 142
    },
    {
        "id": "6d486b07c8f289b2",
        "type": "group",
        "z": "a6d6182e67d93116",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "90e95dacaae5320f",
            "eee40fbf378e1e92",
            "a6b263caa0aa623c",
            "3df08a5d5d43bf99"
        ],
        "x": 1754,
        "y": 359,
        "w": 442,
        "h": 142
    },
    {
        "id": "316c8c1313ca9e4f",
        "type": "group",
        "z": "a6d6182e67d93116",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "028ec6b99e5a9543",
            "9768fecc11c4b065",
            "f6764d4ad1cba4db",
            "10a627aa5994d56a"
        ],
        "x": 1754,
        "y": 519,
        "w": 532,
        "h": 162
    },
    {
        "id": "c95d8ac4a4d56111",
        "type": "group",
        "z": "a6d6182e67d93116",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "266415c986c85fdf",
            "a16c30aeca9bc8af",
            "b3e18e35b846cf43",
            "f8e787ed326b52fd"
        ],
        "x": 1754,
        "y": 699,
        "w": 442,
        "h": 142
    },
    {
        "id": "364dbf4d39541872",
        "type": "group",
        "z": "a6d6182e67d93116",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b7078b3e961aff0e",
            "795507d56174ac40",
            "13abe41e5d26a50c"
        ],
        "x": 1754,
        "y": 859,
        "w": 352,
        "h": 122
    },
    {
        "id": "d4a8a7cd444342df",
        "type": "group",
        "z": "a6d6182e67d93116",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4aededdd0f65f7c9",
            "f703056fe41cb701",
            "b108e768278bd659",
            "8e495d1d1d53f432"
        ],
        "x": 34,
        "y": 319,
        "w": 312,
        "h": 142
    },
    {
        "id": "95904e82852f7330",
        "type": "group",
        "z": "a6d6182e67d93116",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "da92fb1e4495d55c",
            "f370915a0259bd65",
            "f07963095545afd8"
        ],
        "x": 514,
        "y": 139,
        "w": 312,
        "h": 122
    },
    {
        "id": "726ffad410c6a34d",
        "type": "group",
        "z": "a6d6182e67d93116",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e956ee630628ea07",
            "fe52489a782eb911",
            "25532a3b7017ce18",
            "f61573cb32c03048",
            "ac8984247701bbfc"
        ],
        "x": 1754,
        "y": 999,
        "w": 482,
        "h": 162
    },
    {
        "id": "64dfd012be86c1fe",
        "type": "group",
        "z": "a6d6182e67d93116",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c195f915de1f9db5",
            "f11497e191e7401d",
            "cc8577dfb9032247",
            "b6ea36b48fad195f",
            "dc39e4c7769a9baa",
            "c8784ffffe2432fb",
            "a722bc3a300f190e"
        ],
        "x": 584,
        "y": 499,
        "w": 372,
        "h": 202
    },
    {
        "id": "75ba6db0cd14a9d2",
        "type": "group",
        "z": "a6d6182e67d93116",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "257b4cd4833af309",
            "fd09d20ce29c0726",
            "7f8ef6bddda33533",
            "4d57afebd090dfb3",
            "f4f05f6b435d80db"
        ],
        "x": 374,
        "y": 299,
        "w": 452,
        "h": 182
    },
    {
        "id": "ede627999709f18e",
        "type": "inject",
        "z": "a6d6182e67d93116",
        "g": "5c33c43d92038f2a",
        "name": "Bei neustart oder manuell",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1030,
        "y": 220,
        "wires": [
            [
                "02d059373af9e698"
            ]
        ]
    },
    {
        "id": "5ef458cae7ba2e30",
        "type": "comment",
        "z": "a6d6182e67d93116",
        "g": "5c33c43d92038f2a",
        "name": "Flow variablen und Schwellenwerte setzen",
        "info": "",
        "x": 1080,
        "y": 180,
        "wires": []
    },
    {
        "id": "d1a54fb3f544b743",
        "type": "inject",
        "z": "a6d6182e67d93116",
        "g": "5c33c43d92038f2a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 980,
        "y": 260,
        "wires": [
            [
                "8e5c847979ab5573"
            ]
        ]
    },
    {
        "id": "1b97ad0cfbd02436",
        "type": "debug",
        "z": "a6d6182e67d93116",
        "g": "5c33c43d92038f2a",
        "name": "debug 20",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 260,
        "wires": []
    },
    {
        "id": "3672069f5bed1b1a",
        "type": "comment",
        "z": "a6d6182e67d93116",
        "g": "fdec1a84381bfe22",
        "name": "Notlademodus",
        "info": "",
        "x": 190,
        "y": 860,
        "wires": []
    },
    {
        "id": "cc8e4208561fea4b",
        "type": "change",
        "z": "a6d6182e67d93116",
        "g": "fdec1a84381bfe22",
        "name": "Ladeleistung Notmodus",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "900",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 940,
        "wires": [
            [
                "56dc614b65914acb"
            ]
        ]
    },
    {
        "id": "a23aa6813ef3e423",
        "type": "change",
        "z": "a6d6182e67d93116",
        "g": "fdec1a84381bfe22",
        "name": "Schalter auf 1 Notmodus",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 980,
        "wires": [
            [
                "638ac4107189b017"
            ]
        ]
    },
    {
        "id": "638ac4107189b017",
        "type": "ioBroker out",
        "z": "a6d6182e67d93116",
        "g": "fdec1a84381bfe22",
        "name": "AC Modus wechseln",
        "topic": "zendure-solarflow.0.73bkTV.device-key.control.acMode",
        "ack": "false",
        "autoCreate": "false",
        "stateName": "",
        "role": "",
        "payloadType": "",
        "readonly": "",
        "stateUnit": "",
        "stateMin": "",
        "stateMax": "",
        "x": 800,
        "y": 1000,
        "wires": []
    },
    {
        "id": "56dc614b65914acb",
        "type": "ioBroker out",
        "z": "a6d6182e67d93116",
        "g": "fdec1a84381bfe22",
        "name": "ACE1500 Ladeleistung",
        "topic": "zendure-solarflow.0.73bkTV.device-key.control.setInputLimit",
        "ack": "false",
        "autoCreate": "false",
        "stateName": "",
        "role": "",
        "payloadType": "",
        "readonly": "",
        "stateUnit": "",
        "stateMin": "",
        "stateMax": "",
        "x": 800,
        "y": 940,
        "wires": []
    },
    {
        "id": "89b65f7936ac8c5b",
        "type": "switch",
        "z": "a6d6182e67d93116",
        "g": "fdec1a84381bfe22",
        "name": "Notlademodus",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "open",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "close",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 200,
        "y": 1080,
        "wires": [
            [
                "a9da176d0dcdfe61"
            ],
            [
                "a23aa6813ef3e423",
                "15101eb5c417693f",
                "cc8e4208561fea4b"
            ]
        ]
    },
    {
        "id": "a9da176d0dcdfe61",
        "type": "change",
        "z": "a6d6182e67d93116",
        "g": "fdec1a84381bfe22",
        "name": "Normalbetrieb",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gate_control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "open",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 860,
        "wires": [
            [
                "4a05a5e75771c60a",
                "7ad6552b84970a12"
            ]
        ]
    },
    {
        "id": "15101eb5c417693f",
        "type": "change",
        "z": "a6d6182e67d93116",
        "g": "fdec1a84381bfe22",
        "name": "Block Normalbetrieb",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "close",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gate_control",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 900,
        "wires": [
            [
                "4a05a5e75771c60a",
                "7ad6552b84970a12"
            ]
        ]
    },
    {
        "id": "4a05a5e75771c60a",
        "type": "join",
        "z": "a6d6182e67d93116",
        "g": "fdec1a84381bfe22",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "1",
        "count": "1",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 710,
        "y": 880,
        "wires": [
            [
                "63d3a3c2e894a4f5",
                "8ec8ebccb52cbcf3"
            ]
        ]
    },
    {
        "id": "7ad6552b84970a12",
        "type": "function",
        "z": "a6d6182e67d93116",
        "g": "fdec1a84381bfe22",
        "name": "Gate open? (Normalbetrieb)",
        "func": "// PrÃ¼fe, ob es schon eine Flagge fÃ¼r den Status \"open\" gibt\nif (global.get('gate_open') !== true && msg.payload === \"open\") {\n    // Setze die Ladeleistung auf 0\n    msg.payload = 0;\n\n    // Setze die Flagge auf \"true\", um zu verhindern, dass dies erneut passiert\n    global.set('gate_open', true);\n\n    return msg;\n} \n// Wenn der Zustand auf \"close\" wechselt, setze die Flagge zurÃ¼ck\nelse if (msg.payload === \"close\") {\n    global.set('gate_open', false);\n}\n\n// Falls der Zustand noch nicht gewechselt ist oder die Flagge gesetzt ist, nichts tun\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1020,
        "wires": [
            [
                "56dc614b65914acb"
            ]
        ]
    },
    {
        "id": "63d3a3c2e894a4f5",
        "type": "switch",
        "z": "a6d6182e67d93116",
        "g": "fdec1a84381bfe22",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "close",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 430,
        "y": 1120,
        "wires": [
            [
                "0f9822042dbc2bc7"
            ]
        ]
    },
    {
        "id": "0f9822042dbc2bc7",
        "type": "change",
        "z": "a6d6182e67d93116",
        "g": "fdec1a84381bfe22",
        "name": "Stop",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 1120,
        "wires": [
            [
                "78399e348d7af107"
            ]
        ]
    },
    {
        "id": "ce0ea9008fc155c3",
        "type": "comment",
        "z": "a6d6182e67d93116",
        "g": "fdec1a84381bfe22",
        "name": "Stopp entladen bis 12 Uhr ",
        "info": "",
        "x": 490,
        "y": 1080,
        "wires": []
    },
    {
        "id": "66de9be590acdaee",
        "type": "link in",
        "z": "a6d6182e67d93116",
        "g": "fdec1a84381bfe22",
        "name": "link in 90",
        "links": [
            "4aededdd0f65f7c9",
            "47e45392a879640f"
        ],
        "x": 75,
        "y": 920,
        "wires": [
            [
                "cde594aede70a1ff"
            ]
        ]
    },
    {
        "id": "8ec8ebccb52cbcf3",
        "type": "link out",
        "z": "a6d6182e67d93116",
        "g": "fdec1a84381bfe22",
        "name": "Ausgang Notladen",
        "mode": "link",
        "links": [
            "53190f9a7ab96a35",
            "9cb8ca912caf9f76",
            "d68f7cc2ca756ae7",
            "7ffd0158cd72f396"
        ],
        "x": 855,
        "y": 880,
        "wires": []
    },
    {
        "id": "78399e348d7af107",
        "type": "link out",
        "z": "a6d6182e67d93116",
        "g": "fdec1a84381bfe22",
        "name": "Gate nach Notladen",
        "mode": "link",
        "links": [
            "c90ad17b6bc9d8c2"
        ],
        "x": 965,
        "y": 1060,
        "wires": []
    },
    {
        "id": "cde594aede70a1ff",
        "type": "function",
        "z": "a6d6182e67d93116",
        "g": "fdec1a84381bfe22",
        "name": "minSOC berechnen",
        "func": "// Extrahiere die SOC-Werte aus msg.payload\nlet soc1 = msg.payload.SOC_1;\nlet soc2 = msg.payload.SOC_2;\nlet soc3 = msg.payload.SOC_3;\nlet soc4 = msg.payload.SOC_4;\n\n// Berechne den kleinsten SOC-Wert\nlet minSOC = Math.min(soc1, soc2, soc3, soc4);\n\n// Hole den minVol-Wert aus msg.payload\nlet minVol = msg.payload.minVol;\n\n// Bereinige die Nachricht und reiche nur minSOC und minVol durch\nmsg.payload = {\n    minSOC: minSOC,\n    minVol: minVol\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 920,
        "wires": [
            [
                "ba071f7f45abd274"
            ]
        ]
    },
    {
        "id": "ba071f7f45abd274",
        "type": "function",
        "z": "a6d6182e67d93116",
        "g": "fdec1a84381bfe22",
        "name": "Gate auf oder zu ",
        "func": "// === Notlademodus basierend auf Zellspannung (minVol) =====================\n// Ziel: Aktiviere Notlademodus bei kritischer minZellspannung (z.â€¯B. 2.90â€¯V)\n//       und deaktiviere ihn erst wieder bei ausreichender Erholung (z.â€¯B. 3.20â€¯V).\n//       â†’ Ohne SOC, rein spannungsbasiert â€“ direkt, verlÃ¤sslich, akkurat\n// ==========================================================================\n\n// Kleinste Zellspannung (kommt z.â€¯B. aus ioBroker)\nlet minVol = Number(msg.payload.minVol); // z.â€¯B. 2.94â€¯V\n\n// Schwellenwerte definieren\nlet volCloseThreshold = 2.90; // Unter dieser Grenze â†’ Gate zu (Notlademodus)\nlet volOpenThreshold  = 3.20; // Ab hier â†’ Gate wieder Ã¶ffnen (Normalbetrieb)\n\n// Entscheidungslogik\nif (minVol <= volCloseThreshold) {\n    msg.payload = \"close\";       // Sperren â†’ Notladung aktivieren\n} else if (minVol >= volOpenThreshold) {\n    msg.payload = \"open\";        // Freigeben â†’ normaler Betrieb erlaubt\n} else {\n    return null;                 // Kein Zustandwechsel â†’ Flow schweigt\n}\n\n// Topic setzen, auf das dein Gate hÃ¶rt\nmsg.topic = \"gate_control\";\n\n// Nachricht zurÃ¼ckgeben\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 980,
        "wires": [
            [
                "89b65f7936ac8c5b"
            ]
        ]
    },
    {
        "id": "fa9c8af3e8164f5a",
        "type": "comment",
        "z": "a6d6182e67d93116",
        "g": "16855b68d2ba3edc",
        "name": "Ãœbergabe an HUB1200",
        "info": "",
        "x": 1160,
        "y": 540,
        "wires": []
    },
    {
        "id": "8aaa5fa7994b8902",
        "type": "ioBroker out",
        "z": "a6d6182e67d93116",
        "g": "16855b68d2ba3edc",
        "name": "HUB 1200 Ausgangsleistung",
        "topic": "zendure-solarflow.0.73bkTV.device-key.control.setOutputLimit",
        "ack": "false",
        "autoCreate": "false",
        "stateName": "",
        "role": "",
        "payloadType": "",
        "readonly": "",
        "stateUnit": "",
        "stateMin": "",
        "stateMax": "",
        "x": 1180,
        "y": 600,
        "wires": []
    },
    {
        "id": "de9d9a7f96b9a0b0",
        "type": "ioBroker out",
        "z": "a6d6182e67d93116",
        "g": "16855b68d2ba3edc",
        "name": "ACE1500 Ladeleistung",
        "topic": "zendure-solarflow.0.73bkTV.device-key.control.setInputLimit",
        "ack": "false",
        "autoCreate": "false",
        "stateName": "",
        "role": "",
        "payloadType": "",
        "readonly": "",
        "stateUnit": "",
        "stateMin": "",
        "stateMax": "",
        "x": 1160,
        "y": 660,
        "wires": []
    },
    {
        "id": "c54cefd6af96915f",
        "type": "ioBroker out",
        "z": "a6d6182e67d93116",
        "g": "16855b68d2ba3edc",
        "name": "AC Modus wechseln",
        "topic": "zendure-solarflow.0.73bkTV.device-key.control.acMode",
        "ack": "false",
        "autoCreate": "false",
        "stateName": "",
        "role": "",
        "payloadType": "",
        "readonly": "",
        "stateUnit": "",
        "stateMin": "",
        "stateMax": "",
        "x": 1160,
        "y": 720,
        "wires": []
    },
    {
        "id": "75c4f11a921b0d2c",
        "type": "link in",
        "z": "a6d6182e67d93116",
        "g": "16855b68d2ba3edc",
        "name": "link in 91",
        "links": [
            "6fd8cc9f4e63da8a"
        ],
        "x": 1025,
        "y": 660,
        "wires": [
            [
                "de9d9a7f96b9a0b0"
            ]
        ]
    },
    {
        "id": "2a992f91ddb25702",
        "type": "link in",
        "z": "a6d6182e67d93116",
        "g": "16855b68d2ba3edc",
        "name": "link in 92",
        "links": [
            "30fb2d9faa875faf"
        ],
        "x": 1025,
        "y": 720,
        "wires": [
            [
                "c54cefd6af96915f"
            ]
        ]
    },
    {
        "id": "b5ea0e7198b01863",
        "type": "link in",
        "z": "a6d6182e67d93116",
        "g": "16855b68d2ba3edc",
        "name": "link in 93",
        "links": [
            "f448b1437badd8af",
            "7254aa3b88f6e5d6",
            "f11497e191e7401d"
        ],
        "x": 1025,
        "y": 600,
        "wires": [
            [
                "8aaa5fa7994b8902"
            ]
        ]
    },
    {
        "id": "aac8615345d74e74",
        "type": "gate",
        "z": "a6d6182e67d93116",
        "g": "1b7c1e9684985143",
        "name": "Normal oder Notbetrieb",
        "controlTopic": "gate_control",
        "defaultState": "open",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "default",
        "x": 1230,
        "y": 1060,
        "wires": [
            [
                "73307e1d5c274712"
            ]
        ]
    },
    {
        "id": "d8bbd70eda432690",
        "type": "gate",
        "z": "a6d6182e67d93116",
        "g": "1b7c1e9684985143",
        "name": "Normal oder Notbetrieb",
        "controlTopic": "gate_control",
        "defaultState": "open",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "default",
        "x": 1230,
        "y": 1120,
        "wires": [
            [
                "30fb2d9faa875faf"
            ]
        ]
    },
    {
        "id": "ca3e9208479a3c38",
        "type": "gate",
        "z": "a6d6182e67d93116",
        "g": "1b7c1e9684985143",
        "name": "Normal oder Notbetrieb",
        "controlTopic": "gate_control",
        "defaultState": "open",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "default",
        "x": 1230,
        "y": 1000,
        "wires": [
            [
                "8d958fadb19c64d4"
            ]
        ]
    },
    {
        "id": "cfb34b4b6c2968cb",
        "type": "comment",
        "z": "a6d6182e67d93116",
        "g": "1b7c1e9684985143",
        "name": "Gate-Steuerung",
        "info": "",
        "x": 1200,
        "y": 880,
        "wires": []
    },
    {
        "id": "8d958fadb19c64d4",
        "type": "gate",
        "z": "a6d6182e67d93116",
        "g": "1b7c1e9684985143",
        "name": "Stopp",
        "controlTopic": "gate_control",
        "defaultState": "open",
        "openCmd": "false",
        "closeCmd": "true",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "default",
        "x": 1530,
        "y": 940,
        "wires": [
            [
                "2ca2e83b8ddc5fd4"
            ]
        ]
    },
    {
        "id": "d68f7cc2ca756ae7",
        "type": "link in",
        "z": "a6d6182e67d93116",
        "g": "1b7c1e9684985143",
        "name": "link in 94",
        "links": [
            "d9eb5fcacf7b1c02",
            "8ec8ebccb52cbcf3",
            "9f10f3863ebe0905",
            "b6cb8ffa2bd2a69f",
            "48f14b4cf3da6205"
        ],
        "x": 1075,
        "y": 1000,
        "wires": [
            [
                "ca3e9208479a3c38"
            ]
        ]
    },
    {
        "id": "9cb8ca912caf9f76",
        "type": "link in",
        "z": "a6d6182e67d93116",
        "g": "1b7c1e9684985143",
        "name": "link in 95",
        "links": [
            "5d029309973bf0f5",
            "8ec8ebccb52cbcf3",
            "ecf677a62347a114",
            "b6cb8ffa2bd2a69f",
            "48f14b4cf3da6205"
        ],
        "x": 1075,
        "y": 1060,
        "wires": [
            [
                "aac8615345d74e74"
            ]
        ]
    },
    {
        "id": "53190f9a7ab96a35",
        "type": "link in",
        "z": "a6d6182e67d93116",
        "g": "1b7c1e9684985143",
        "name": "link in 96",
        "links": [
            "a78445aadd7b3e1c",
            "8ec8ebccb52cbcf3",
            "1b9438cedb154727",
            "b6cb8ffa2bd2a69f",
            "48f14b4cf3da6205"
        ],
        "x": 1075,
        "y": 1120,
        "wires": [
            [
                "d8bbd70eda432690"
            ]
        ]
    },
    {
        "id": "6fd8cc9f4e63da8a",
        "type": "link out",
        "z": "a6d6182e67d93116",
        "g": "1b7c1e9684985143",
        "name": "Laden Ausgang",
        "mode": "link",
        "links": [
            "75c4f11a921b0d2c"
        ],
        "x": 1625,
        "y": 1060,
        "wires": []
    },
    {
        "id": "30fb2d9faa875faf",
        "type": "link out",
        "z": "a6d6182e67d93116",
        "g": "1b7c1e9684985143",
        "name": "AC Switch Ausgang ",
        "mode": "link",
        "links": [
            "2a992f91ddb25702"
        ],
        "x": 1415,
        "y": 1120,
        "wires": []
    },
    {
        "id": "2ca2e83b8ddc5fd4",
        "type": "gate",
        "z": "a6d6182e67d93116",
        "g": "1b7c1e9684985143",
        "name": "Manuel Stop",
        "controlTopic": "control",
        "defaultState": "open",
        "openCmd": "false",
        "closeCmd": "true",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "default",
        "x": 1550,
        "y": 880,
        "wires": [
            [
                "f448b1437badd8af"
            ]
        ]
    },
    {
        "id": "f448b1437badd8af",
        "type": "link out",
        "z": "a6d6182e67d93116",
        "g": "1b7c1e9684985143",
        "name": "Entladen Ausgang",
        "mode": "link",
        "links": [
            "b5ea0e7198b01863"
        ],
        "x": 1665,
        "y": 880,
        "wires": []
    },
    {
        "id": "e417cf48e6464605",
        "type": "link in",
        "z": "a6d6182e67d93116",
        "g": "1b7c1e9684985143",
        "name": "link in 97",
        "links": [
            "f32dcb4007d8248d"
        ],
        "x": 1395,
        "y": 860,
        "wires": [
            [
                "2ca2e83b8ddc5fd4"
            ]
        ]
    },
    {
        "id": "c90ad17b6bc9d8c2",
        "type": "link in",
        "z": "a6d6182e67d93116",
        "g": "1b7c1e9684985143",
        "name": "link in 98",
        "links": [
            "78399e348d7af107",
            "20f917c242441452"
        ],
        "x": 1395,
        "y": 940,
        "wires": [
            [
                "8d958fadb19c64d4"
            ]
        ]
    },
    {
        "id": "1c2023c176f5a2e8",
        "type": "comment",
        "z": "a6d6182e67d93116",
        "g": "e967605812eb7141",
        "name": "Trigger fÃ¼r Flow",
        "info": "",
        "x": 160,
        "y": 180,
        "wires": []
    },
    {
        "id": "ab4b912ea2136add",
        "type": "inject",
        "z": "a6d6182e67d93116",
        "g": "e967605812eb7141",
        "name": "Jede Minute",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 220,
        "wires": [
            [
                "ede212e834501182"
            ]
        ]
    },
    {
        "id": "6f9e67dd7d69d22c",
        "type": "link out",
        "z": "a6d6182e67d93116",
        "g": "e967605812eb7141",
        "name": "Ausgang Trigger Flow",
        "mode": "link",
        "links": [
            "f703056fe41cb701",
            "69d4df643ca52151"
        ],
        "x": 415,
        "y": 220,
        "wires": []
    },
    {
        "id": "ede212e834501182",
        "type": "gate",
        "z": "a6d6182e67d93116",
        "g": "e967605812eb7141",
        "name": "STOP",
        "controlTopic": "control",
        "defaultState": "open",
        "openCmd": "false",
        "closeCmd": "true",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "default",
        "x": 330,
        "y": 220,
        "wires": [
            [
                "6f9e67dd7d69d22c"
            ]
        ]
    },
    {
        "id": "092a137a325fe911",
        "type": "link in",
        "z": "a6d6182e67d93116",
        "g": "e967605812eb7141",
        "name": "Eingang STOP",
        "links": [
            "b18a0870d870748d",
            "a6b263caa0aa623c",
            "25532a3b7017ce18"
        ],
        "x": 305,
        "y": 180,
        "wires": [
            [
                "ede212e834501182"
            ]
        ]
    },
    {
        "id": "4aededdd0f65f7c9",
        "type": "link out",
        "z": "a6d6182e67d93116",
        "g": "d4a8a7cd444342df",
        "name": "Ausgang iobroker in",
        "mode": "link",
        "links": [
            "66de9be590acdaee",
            "290ec62821d143e4",
            "a1ddbfe84222fcb9",
            "cafd47575ce8c14a",
            "ba4d8d7f23c3f580",
            "d66724bb8b7ac7f5",
            "240016dc51a5ebf6",
            "f370915a0259bd65",
            "66708db013b73317",
            "c195f915de1f9db5"
        ],
        "x": 305,
        "y": 420,
        "wires": []
    },
    {
        "id": "f703056fe41cb701",
        "type": "link in",
        "z": "a6d6182e67d93116",
        "g": "d4a8a7cd444342df",
        "name": "link in 99",
        "links": [
            "6f9e67dd7d69d22c"
        ],
        "x": 75,
        "y": 420,
        "wires": [
            [
                "b108e768278bd659"
            ]
        ]
    },
    {
        "id": "5f68144dae6241bb",
        "type": "comment",
        "z": "a6d6182e67d93116",
        "g": "9532c2aa994c9ed4",
        "name": "Funktionen Leistungsberrechnung",
        "info": "",
        "x": 200,
        "y": 540,
        "wires": []
    },
    {
        "id": "ceee78f3347c3334",
        "type": "function",
        "z": "a6d6182e67d93116",
        "g": "9532c2aa994c9ed4",
        "name": "AC-Switch",
        "func": "// Eingangswerte\nconst batteryLevel        = parseFloat(msg.payload.batteryLevel);\nconst currentSwitchState  = msg.payload.switchState;\nconst isNight             = global.get('isNight');\nconst fullChargeThreshold = parseFloat(global.get('FULL_CHARGE_THRESHOLD') || 100);\n\n// Keys\nconst chargeStatusKey = 'fullChargeReachedSinceLastDaylight';\nconst lastIsNightKey  = 'lastIsNight';\n\n// 1) Setze Volllade-Flag, sobald Schwelle erreicht\nif (batteryLevel >= fullChargeThreshold) {\n    flow.set(chargeStatusKey, true);\n}\n\n// 2) Nur wenn wir eben von Nachtâ†’Tag gewechselt sind, die Flag lÃ¶schen\nlet lastIsNight = flow.get(lastIsNightKey);\nif (lastIsNight === true && isNight === false) {\n    flow.set(chargeStatusKey, false);\n}\n\n// 3) FÃ¼r das nÃ¤chste Mal merken, ob gerade Nacht ist\nflow.set(lastIsNightKey, isNight);\n\n// Shortcut\nconst fullChargeReached = flow.get(chargeStatusKey);\n\n// Logging fÃ¼rs Debug\n// node.warn(`batt=${batteryLevel}%, isNight=${isNight}, lastIsNight=${lastIsNight}, fullChargeReached=${fullChargeReached}`);\n\n// 4) Ziel-Modus: Entladen (2) wenn Nacht oder voll, sonst Laden (1)\nlet desiredState = (isNight || fullChargeReached) ? 2 : 1;\n\n// 5) Nur senden, wenn sich wirklich was Ã¤ndert\nif (currentSwitchState === desiredState) {\n    return null;\n}\n\nmsg.payload = desiredState;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 740,
        "wires": [
            [
                "1b9438cedb154727"
            ]
        ]
    },
    {
        "id": "d66724bb8b7ac7f5",
        "type": "link in",
        "z": "a6d6182e67d93116",
        "g": "9532c2aa994c9ed4",
        "name": "link in 100",
        "links": [
            "4aededdd0f65f7c9",
            "47e45392a879640f"
        ],
        "x": 75,
        "y": 680,
        "wires": [
            [
                "ceee78f3347c3334",
                "d6f4855f6c171704",
                "65ef7ab1789596a9"
            ]
        ]
    },
    {
        "id": "9f10f3863ebe0905",
        "type": "link out",
        "z": "a6d6182e67d93116",
        "g": "9532c2aa994c9ed4",
        "name": "Entladen",
        "mode": "link",
        "links": [
            "d68f7cc2ca756ae7"
        ],
        "x": 515,
        "y": 620,
        "wires": []
    },
    {
        "id": "ecf677a62347a114",
        "type": "link out",
        "z": "a6d6182e67d93116",
        "g": "9532c2aa994c9ed4",
        "name": "Laden",
        "mode": "link",
        "links": [
            "9cb8ca912caf9f76"
        ],
        "x": 515,
        "y": 680,
        "wires": []
    },
    {
        "id": "1b9438cedb154727",
        "type": "link out",
        "z": "a6d6182e67d93116",
        "g": "9532c2aa994c9ed4",
        "name": "AC-Switch",
        "mode": "link",
        "links": [
            "53190f9a7ab96a35"
        ],
        "x": 515,
        "y": 740,
        "wires": []
    },
    {
        "id": "678f64d519f6f511",
        "type": "ioBroker in",
        "z": "a6d6182e67d93116",
        "g": "be20200ecedd947f",
        "name": "Notladen manuell",
        "attrname": "payload",
        "topic": "0_userdata.0.Steuerung.AC_Notladen_Start",
        "payloadType": "value",
        "onlyack": "",
        "func": "all",
        "gap": "",
        "fireOnStart": "true",
        "outFormat": "MQTT",
        "x": 1860,
        "y": 300,
        "wires": [
            [
                "a042ee7a022ba719"
            ]
        ]
    },
    {
        "id": "a042ee7a022ba719",
        "type": "subflow:932e289992721e7b",
        "z": "a6d6182e67d93116",
        "g": "be20200ecedd947f",
        "name": "Manuelles Notladen",
        "x": 2060,
        "y": 300,
        "wires": [
            [
                "b18a0870d870748d"
            ]
        ]
    },
    {
        "id": "529ce865dfece041",
        "type": "comment",
        "z": "a6d6182e67d93116",
        "g": "be20200ecedd947f",
        "name": "Manuelles Notladen",
        "info": "",
        "x": 1870,
        "y": 240,
        "wires": []
    },
    {
        "id": "b18a0870d870748d",
        "type": "link out",
        "z": "a6d6182e67d93116",
        "g": "be20200ecedd947f",
        "name": "link out 11",
        "mode": "link",
        "links": [
            "092a137a325fe911"
        ],
        "x": 2195,
        "y": 300,
        "wires": []
    },
    {
        "id": "a466887cb4482a44",
        "type": "ioBroker in",
        "z": "a6d6182e67d93116",
        "g": "29ee38cf09bb598d",
        "name": "Stop entladen",
        "attrname": "payload",
        "topic": "0_userdata.0.Steuerung.Entladen_Stop",
        "payloadType": "value",
        "onlyack": "",
        "func": "all",
        "gap": "",
        "fireOnStart": "true",
        "outFormat": "MQTT",
        "x": 1850,
        "y": 140,
        "wires": [
            [
                "f03233ccceeb6eb9"
            ]
        ]
    },
    {
        "id": "7ff2a925c93d50e1",
        "type": "comment",
        "z": "a6d6182e67d93116",
        "g": "29ee38cf09bb598d",
        "name": "Manueller Entladestop",
        "info": "",
        "x": 1880,
        "y": 80,
        "wires": []
    },
    {
        "id": "f03233ccceeb6eb9",
        "type": "subflow:df31c9eddb881a7e",
        "z": "a6d6182e67d93116",
        "g": "29ee38cf09bb598d",
        "name": "",
        "x": 2040,
        "y": 140,
        "wires": [
            [
                "f32dcb4007d8248d"
            ]
        ]
    },
    {
        "id": "f32dcb4007d8248d",
        "type": "link out",
        "z": "a6d6182e67d93116",
        "g": "29ee38cf09bb598d",
        "name": "Manueller Entladestop",
        "mode": "link",
        "links": [
            "e417cf48e6464605"
        ],
        "x": 2175,
        "y": 140,
        "wires": []
    },
    {
        "id": "90e95dacaae5320f",
        "type": "ioBroker in",
        "z": "a6d6182e67d93116",
        "g": "6d486b07c8f289b2",
        "name": "Stopp Zendure",
        "attrname": "payload",
        "topic": "0_userdata.0.Steuerung.Zendure_Flow_Stop",
        "payloadType": "value",
        "onlyack": "",
        "func": "all",
        "gap": "",
        "fireOnStart": "true",
        "outFormat": "MQTT",
        "x": 1860,
        "y": 460,
        "wires": [
            [
                "3df08a5d5d43bf99"
            ]
        ]
    },
    {
        "id": "eee40fbf378e1e92",
        "type": "comment",
        "z": "a6d6182e67d93116",
        "g": "6d486b07c8f289b2",
        "name": "STOP Zendure",
        "info": "",
        "x": 1860,
        "y": 400,
        "wires": []
    },
    {
        "id": "a6b263caa0aa623c",
        "type": "link out",
        "z": "a6d6182e67d93116",
        "g": "6d486b07c8f289b2",
        "name": "link out 12",
        "mode": "link",
        "links": [
            "092a137a325fe911"
        ],
        "x": 2155,
        "y": 460,
        "wires": []
    },
    {
        "id": "028ec6b99e5a9543",
        "type": "ioBroker in",
        "z": "a6d6182e67d93116",
        "g": "316c8c1313ca9e4f",
        "name": "Zendure schlecht Wetter",
        "attrname": "payload",
        "topic": "0_userdata.0.Steuerung.Zendure_schlecht_Wetter",
        "payloadType": "value",
        "onlyack": "",
        "func": "all",
        "gap": "",
        "fireOnStart": "true",
        "outFormat": "MQTT",
        "x": 1890,
        "y": 600,
        "wires": [
            [
                "f6764d4ad1cba4db"
            ]
        ]
    },
    {
        "id": "9768fecc11c4b065",
        "type": "comment",
        "z": "a6d6182e67d93116",
        "g": "316c8c1313ca9e4f",
        "name": "Sommer/Winterbetrieb low_minVol",
        "info": "",
        "x": 1920,
        "y": 560,
        "wires": []
    },
    {
        "id": "f6764d4ad1cba4db",
        "type": "function",
        "z": "a6d6182e67d93116",
        "g": "316c8c1313ca9e4f",
        "name": "Check Sommer oder Winter ",
        "func": "// === low_minVol Schalterlogik (Sommer/Winter) ===============================\n// Ziel: Setzt manuell die Zellspannungsschwelle fÃ¼r Entladesperre (low_minVol)\n// Steuerung erfolgt Ã¼ber den Schalter \"Zendure schlecht Wetter\"\n// â†’ TRUE = Wintermodus = Zellschutz aktiv (z.â€¯B. 3.15 V)\n// â†’ FALSE = Sommermodus = Standardbetrieb (z.â€¯B. 3.05 V)\n// ============================================================================\nconst isWinterMode = msg.payload === true;  // Google Home Schalterwert\n\n// Schwellenwert festlegen\nconst minVolThreshold = isWinterMode ? 3.2 : 3.1;\n\n// Flow-Variable setzen â†’ wird vom Gate-Node benutzt\nflow.set(\"low_minVol\", minVolThreshold);\n\n// Optional: Statuslogik oder RÃ¼ckmeldung\nmsg.payload = `low_minVol gesetzt auf ${minVolThreshold} V (${isWinterMode ? \"Wintermodus\" : \"Sommermodus\"})`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2140,
        "y": 600,
        "wires": [
            [
                "10a627aa5994d56a"
            ]
        ]
    },
    {
        "id": "266415c986c85fdf",
        "type": "ioBroker in",
        "z": "a6d6182e67d93116",
        "g": "c95d8ac4a4d56111",
        "name": "Stop Laden",
        "attrname": "payload",
        "topic": "0_userdata.0.Steuerung.Laden_Stop",
        "payloadType": "value",
        "onlyack": "",
        "func": "all",
        "gap": "",
        "fireOnStart": "true",
        "outFormat": "MQTT",
        "x": 1850,
        "y": 800,
        "wires": [
            [
                "f8e787ed326b52fd"
            ]
        ]
    },
    {
        "id": "a16c30aeca9bc8af",
        "type": "comment",
        "z": "a6d6182e67d93116",
        "g": "c95d8ac4a4d56111",
        "name": "Manueller Ladestop",
        "info": "",
        "x": 1870,
        "y": 740,
        "wires": []
    },
    {
        "id": "73307e1d5c274712",
        "type": "gate",
        "z": "a6d6182e67d93116",
        "g": "1b7c1e9684985143",
        "name": "Laden Stop",
        "controlTopic": "control",
        "defaultState": "open",
        "openCmd": "false",
        "closeCmd": "true",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "default",
        "x": 1510,
        "y": 1060,
        "wires": [
            [
                "6fd8cc9f4e63da8a"
            ]
        ]
    },
    {
        "id": "bd6b6c380f473aa4",
        "type": "link in",
        "z": "a6d6182e67d93116",
        "g": "1b7c1e9684985143",
        "name": "link in 101",
        "links": [
            "b3e18e35b846cf43"
        ],
        "x": 1395,
        "y": 1020,
        "wires": [
            [
                "73307e1d5c274712"
            ]
        ]
    },
    {
        "id": "b3e18e35b846cf43",
        "type": "link out",
        "z": "a6d6182e67d93116",
        "g": "c95d8ac4a4d56111",
        "name": "Manueller Ladestop Ausgang ",
        "mode": "link",
        "links": [
            "bd6b6c380f473aa4"
        ],
        "x": 2155,
        "y": 800,
        "wires": []
    },
    {
        "id": "f8e787ed326b52fd",
        "type": "subflow:b974f4b386e027d4",
        "z": "a6d6182e67d93116",
        "g": "c95d8ac4a4d56111",
        "name": "Manueller Ladestop",
        "x": 2030,
        "y": 800,
        "wires": [
            [
                "b3e18e35b846cf43"
            ]
        ]
    },
    {
        "id": "b7078b3e961aff0e",
        "type": "ioBroker in",
        "z": "a6d6182e67d93116",
        "g": "364dbf4d39541872",
        "name": "ByPass an/aus",
        "attrname": "payload",
        "topic": "zendure-solarflow.0.73bkTV.device-key.pass",
        "payloadType": "value",
        "onlyack": "",
        "func": "all",
        "gap": "",
        "fireOnStart": "true",
        "outFormat": "MQTT",
        "x": 1860,
        "y": 940,
        "wires": [
            [
                "13abe41e5d26a50c"
            ]
        ]
    },
    {
        "id": "795507d56174ac40",
        "type": "comment",
        "z": "a6d6182e67d93116",
        "g": "364dbf4d39541872",
        "name": "DPL Steuerung nach ByPass",
        "info": "",
        "x": 1900,
        "y": 900,
        "wires": []
    },
    {
        "id": "b108e768278bd659",
        "type": "subflow:cb8e7ad27a351884",
        "z": "a6d6182e67d93116",
        "g": "d4a8a7cd444342df",
        "name": "",
        "x": 190,
        "y": 420,
        "wires": [
            [
                "4aededdd0f65f7c9"
            ]
        ]
    },
    {
        "id": "8e495d1d1d53f432",
        "type": "comment",
        "z": "a6d6182e67d93116",
        "g": "d4a8a7cd444342df",
        "name": "Werte von ioBroker holen",
        "info": "",
        "x": 170,
        "y": 360,
        "wires": []
    },
    {
        "id": "da92fb1e4495d55c",
        "type": "function",
        "z": "a6d6182e67d93116",
        "g": "95904e82852f7330",
        "name": "Is Night True/False",
        "func": "// Hole die Sonnenzeit-Werte als Strings (hh:mm) aus msg.payload\nlet sunriseTime = msg.payload.sunriseTimestamp; // Format hh:mm\nlet sunsetTime = msg.payload.sunsetTimestamp;   // Format hh:mm\n\n// Absicherung: PrÃ¼fe, ob beide Werte korrekt vorhanden sind\nif (!sunriseTime || !sunsetTime || !sunriseTime.includes(':') || !sunsetTime.includes(':')) {\n    node.error(\"Fehler: Sonnenzeitangaben fehlen oder haben ein ungÃ¼ltiges Format.\");\n    return null;\n}\n\n// Aktuelle Zeit\nlet currentTime = new Date();\n\n// Konvertiere die Zeiten in vollstÃ¤ndige Date-Objekte\nlet [sunriseHour, sunriseMinute] = sunriseTime.split(':').map(Number);\nlet sunriseDate = new Date(currentTime.getFullYear(), currentTime.getMonth(), currentTime.getDate(), sunriseHour, sunriseMinute);\n\nlet [sunsetHour, sunsetMinute] = sunsetTime.split(':').map(Number);\nlet sunsetDate = new Date(currentTime.getFullYear(), currentTime.getMonth(), currentTime.getDate(), sunsetHour, sunsetMinute);\n\n// Logik zur Bestimmung von isNight\nif (currentTime >= sunsetDate || currentTime < sunriseDate) {\n    global.set('isNight', true);  // Schreibe das globale Flag\n    node.status({ fill: \"blue\", shape: \"dot\", text: \"Night: true\" });\n} else {\n    global.set('isNight', false); // Schreibe das globale Flag\n    node.status({ fill: \"yellow\", shape: \"dot\", text: \"Night: false\" });\n}\n\n// Keine Ausgabe erforderlich, die Node ist rein funktional\nreturn null;\n",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 220,
        "wires": []
    },
    {
        "id": "f370915a0259bd65",
        "type": "link in",
        "z": "a6d6182e67d93116",
        "g": "95904e82852f7330",
        "name": "link in 102",
        "links": [
            "4aededdd0f65f7c9"
        ],
        "x": 555,
        "y": 220,
        "wires": [
            [
                "da92fb1e4495d55c"
            ]
        ]
    },
    {
        "id": "f07963095545afd8",
        "type": "comment",
        "z": "a6d6182e67d93116",
        "g": "95904e82852f7330",
        "name": "Tag/Nacht Check",
        "info": "",
        "x": 700,
        "y": 180,
        "wires": []
    },
    {
        "id": "be1514fe0fd56b6e",
        "type": "function",
        "z": "a6d6182e67d93116",
        "g": "fdec1a84381bfe22",
        "name": "SOC min 50%",
        "func": "if (msg.payload.batteryLevel >= 50) {\n    msg.payload = false; // Ã–ffne das Gate\n    msg.topic = \"gate_control\"; // Setze das Topic\n    return msg;\n} else {\n    return null; // Keine Ã„nderung am Gate\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1120,
        "wires": [
            [
                "78399e348d7af107"
            ]
        ]
    },
    {
        "id": "66708db013b73317",
        "type": "link in",
        "z": "a6d6182e67d93116",
        "g": "fdec1a84381bfe22",
        "name": "link in 103",
        "links": [
            "4aededdd0f65f7c9"
        ],
        "x": 725,
        "y": 1120,
        "wires": [
            [
                "be1514fe0fd56b6e"
            ]
        ]
    },
    {
        "id": "13abe41e5d26a50c",
        "type": "subflow:c40c1e43832f39ef",
        "z": "a6d6182e67d93116",
        "g": "364dbf4d39541872",
        "name": "DPL 0/2",
        "x": 2020,
        "y": 940,
        "wires": []
    },
    {
        "id": "3df08a5d5d43bf99",
        "type": "subflow:2bfa25a03b1cef8a",
        "z": "a6d6182e67d93116",
        "g": "6d486b07c8f289b2",
        "name": "Zendure Stop",
        "x": 2040,
        "y": 460,
        "wires": [
            [
                "a6b263caa0aa623c"
            ]
        ]
    },
    {
        "id": "e956ee630628ea07",
        "type": "ioBroker in",
        "z": "a6d6182e67d93116",
        "g": "726ffad410c6a34d",
        "name": "Zendure Basismodus",
        "attrname": "payload",
        "topic": "0_userdata.0.Steuerung.Zendure_Basismodus",
        "payloadType": "value",
        "onlyack": "",
        "func": "all",
        "gap": "",
        "fireOnStart": "true",
        "outFormat": "MQTT",
        "x": 1880,
        "y": 1080,
        "wires": [
            [
                "fe52489a782eb911",
                "ac8984247701bbfc"
            ]
        ]
    },
    {
        "id": "fe52489a782eb911",
        "type": "subflow:2bfa25a03b1cef8a",
        "z": "a6d6182e67d93116",
        "g": "726ffad410c6a34d",
        "name": "",
        "x": 2080,
        "y": 1080,
        "wires": [
            [
                "25532a3b7017ce18"
            ]
        ]
    },
    {
        "id": "25532a3b7017ce18",
        "type": "link out",
        "z": "a6d6182e67d93116",
        "g": "726ffad410c6a34d",
        "name": "link out 19",
        "mode": "link",
        "links": [
            "092a137a325fe911"
        ],
        "x": 2195,
        "y": 1080,
        "wires": []
    },
    {
        "id": "f61573cb32c03048",
        "type": "comment",
        "z": "a6d6182e67d93116",
        "g": "726ffad410c6a34d",
        "name": "Zendure Basismodus",
        "info": "",
        "x": 1880,
        "y": 1040,
        "wires": []
    },
    {
        "id": "ac8984247701bbfc",
        "type": "subflow:0314f8483689582f",
        "z": "a6d6182e67d93116",
        "g": "726ffad410c6a34d",
        "name": "Schalten der GerÃ¤te",
        "x": 2100,
        "y": 1120,
        "wires": []
    },
    {
        "id": "d6f4855f6c171704",
        "type": "function",
        "z": "a6d6182e67d93116",
        "g": "9532c2aa994c9ed4",
        "name": "Berechnung laden neu",
        "func": "// Notwendige Flow-Variablen einlesen\nlet START_AC_LEISTUNG      = flow.get('START_AC_LEISTUNG');\nlet MAX_AC_LEISTUNG        = flow.get('MAX_AC_LEISTUNG');\nlet SKALIERUNG             = flow.get('SKALIERUNG');\nlet ZIEL_NEGATIVE_LEISTUNG = flow.get('ZIEL_NEGATIVE_LEISTUNG');\n\nlet FULL_CHARGE_THRESHOLD = parseFloat(global.get('FULL_CHARGE_THRESHOLD') || 100);\n\n// Eingangswerte\nlet currentpower = msg.payload.currentPower;\nlet batteryLevel = msg.payload.batteryLevel;\nlet isNight      = global.get('isNight');\n\nif (typeof currentpower === 'undefined' || typeof batteryLevel === 'undefined') {\n    msg.payload = 0;\n    return msg;\n}\n\n// Flag-Logik\nconst flagKey = 'fullChargeReachedSinceLastDaylight';\nconst lastNightKey = 'lastIsNight';\n\n// 1) Vollladung erreicht â†’ Flag setzen\nif (batteryLevel >= FULL_CHARGE_THRESHOLD) {\n    flow.set(flagKey, true);\n}\n\n// 2) Nacht zu Tag erkannt â†’ Flag zurÃ¼cksetzen\nlet lastNight = flow.get(lastNightKey);\nif (lastNight === true && isNight === false) {\n    flow.set(flagKey, false);\n}\nflow.set(lastNightKey, isNight);\n\nconst fullChargeReached = flow.get(flagKey);\n\n// Kein AC-Laden bei Nacht oder vollem Akku\nif (isNight || fullChargeReached) {\n    context.set('currentACLeistung', 0);\n    msg.payload = 0;\n    return msg;\n}\n\n// Regelfehler berechnen (Abweichung vom Zielwert)\nlet fehler = currentpower - ZIEL_NEGATIVE_LEISTUNG;\nlet alteLeistung = context.get('currentACLeistung') || START_AC_LEISTUNG;\nlet delta = fehler / SKALIERUNG;\nlet neueLeistung = alteLeistung - delta;\n\n// Begrenzung & Rundung\nneueLeistung = Math.max(0, Math.min(neueLeistung, MAX_AC_LEISTUNG));\nneueLeistung = Math.round(neueLeistung / 100) * 100;\n\ncontext.set('currentACLeistung', neueLeistung);\nmsg.payload = neueLeistung;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 680,
        "wires": [
            [
                "ecf677a62347a114"
            ]
        ]
    },
    {
        "id": "02d059373af9e698",
        "type": "function",
        "z": "a6d6182e67d93116",
        "g": "5c33c43d92038f2a",
        "name": "Variablen setzen",
        "func": "// Flow- und Global-Variablen initialisieren (nur aktive, persistente mit Fallback)\n\nflow.set('LOW_BATTERY_THRESHOLD', 5);             // SOC-Grenze Winter/Sommerbetrieb\nflow.set('FULL_CHARGE_THRESHOLD', 100);            // Initial â€“ wird dynamisch von SOC-Logik angepasst\nglobal.set('FULL_CHARGE_THRESHOLD', 100);          // Auch global verfÃ¼gbar\nflow.set('NO_CHARGE_DAYS', 5);                     // Tage ohne 100% erlaubt\nflow.set('MAX_OUTPUT_POWER', 850);                 // Max. Discharge-Leistung (W)\nflow.set('START_AC_LEISTUNG', 100);                // Initial AC-Ladung\nflow.set('MAX_AC_LEISTUNG', 900);                  // Max. AC-Ladung\nflow.set('SKALIERUNG', 1);                         // FÃ¼r Delta-Pegelregelung AC\nflow.set('ZIEL_NEGATIVE_LEISTUNG', -100);          // Ziel-Einspeisung fÃ¼r Regelung\nflow.set('reducedChargeDays', 1);                  // Falls duâ€™s spÃ¤ter wieder brauchst\nflow.set('low_minVol', 3.1)                        // minVol fÃ¼r Abschaltung Entladung \n\nif (typeof flow.get('lastSetPower') === 'undefined') {\n    flow.set('lastSetPower', 0);                   // Fallback fÃ¼r Logging und Regelung\n}\n",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 220,
        "wires": []
    },
    {
        "id": "8e5c847979ab5573",
        "type": "function",
        "z": "a6d6182e67d93116",
        "g": "5c33c43d92038f2a",
        "name": "Variablen lesen",
        "func": "// Hole die verwendeten Konstanten aus Flow und Global\nconst lowBatteryThreshold     = flow.get('LOW_BATTERY_THRESHOLD');\nconst fullChargeThreshold     = flow.get('FULL_CHARGE_THRESHOLD');\nconst fullChargeThresholdGlobal = global.get('FULL_CHARGE_THRESHOLD');\nconst noChargeDays            = flow.get('NO_CHARGE_DAYS');\nconst maxOutputPower          = flow.get('MAX_OUTPUT_POWER');\nconst startACLeistung         = flow.get('START_AC_LEISTUNG');\nconst maxACLeistung           = flow.get('MAX_AC_LEISTUNG');\nconst skalierung              = flow.get('SKALIERUNG');\nconst zielNegativeLeistung    = flow.get('ZIEL_NEGATIVE_LEISTUNG');\nconst reducedChargeDays       = flow.get('reducedChargeDays');\nconst lastSetPower            = flow.get('lastSetPower');\nconst socHistory              = flow.get('socHistory');\nconst low_minVol              = flow.get('low_minVol');\n\n// Ausgabe vorbereiten\nmsg.payload = {\n    LOW_BATTERY_THRESHOLD: lowBatteryThreshold,\n    FULL_CHARGE_THRESHOLD_FLOW: fullChargeThreshold,\n    FULL_CHARGE_THRESHOLD_GLOBAL: fullChargeThresholdGlobal,\n    NO_CHARGE_DAYS: noChargeDays,\n    MAX_OUTPUT_POWER: maxOutputPower,\n    START_AC_LEISTUNG: startACLeistung,\n    MAX_AC_LEISTUNG: maxACLeistung,\n    SKALIERUNG: skalierung,\n    ZIEL_NEGATIVE_LEISTUNG: zielNegativeLeistung,\n    TAGE_MIT_REDUZIERTER_LADUNG: reducedChargeDays,\n    LAST_SET_POWER: lastSetPower,\n    SOC_HISTORY: socHistory,\n    low_minVol: low_minVol\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 260,
        "wires": [
            [
                "1b97ad0cfbd02436"
            ]
        ]
    },
    {
        "id": "65ef7ab1789596a9",
        "type": "function",
        "z": "a6d6182e67d93116",
        "g": "9532c2aa994c9ed4",
        "name": "Berechnung entladen (minVol)",
        "func": "// ðŸ›  Lokales Debug-Flag fÃ¼r diese Funktion\nconst ENABLE_DEBUG = false; // â† Auf true setzen, wenn Logging benÃ¶tigt wird\n\n// Konstanten\nconst LOW_BATTERY_THRESHOLD = flow.get('low_minVol') || 3.1;                    // Zellspannungsschwelle (V)\nconst MAX_DISCHARGE_POWER   = flow.get('MAX_OUTPUT_POWER') || 850;             // Maximal erlaubte Entladeleistung (W)\nconst FULL_THRESHOLD        = parseFloat(global.get('FULL_CHARGE_THRESHOLD') || 100); // Vollladegrenze (SOC %)\n\n// Eingangsdaten\nconst batteryLevel       = parseFloat(msg.payload.minVol);    // Aktuelle Zellspannung [V]\nconst currentOutputLimit = msg.payload.OutputLimit;           // Aktuell gesetzte Entladeleistung [W]\nconst isNight            = global.get('isNight');             // Tag-/Nachtstatus vom globalen Kontext\n\n// Flags zur Steuerung von Tageszyklen\nconst FLAG         = 'fullChargeReachedSinceLastDaylight';    // Merkt, ob Akku seit letztem Tagesbeginn voll war\nconst NIGHT_TRACK  = 'lastIsNight';                           // Speichert vorherigen Nachtstatus\n\n// 1) Flag setzen: Vollladung erkannt\nif (batteryLevel >= FULL_THRESHOLD) {\n    flow.set(FLAG, true);\n}\n\n// 2) Tagesbeginn erkennen â†’ Reset der Tages-Entladefreigabe\nconst lastIsNight = flow.get(NIGHT_TRACK);\nif (lastIsNight === true && isNight === false) {\n    flow.set(FLAG, false);  // Nur dann zurÃ¼cksetzen!\n}\nflow.set(NIGHT_TRACK, isNight);\n\nconst fullChargeReached = flow.get(FLAG);\n\n// âš ï¸ LURCHI-STYLE Fallback: Zellspannung kritisch â†’ redundanter Schutz\nconst criticalLimit = flow.get('low_minVol') || 3.1;\nif (batteryLevel <= criticalLimit) {\n    if (ENABLE_DEBUG) node.warn('âš ï¸ Zellspannung kritisch laut Fallback â€“ redundanter Entlade-Stopp aktiv');\n    msg.payload = 0;\n    flow.set('lastSetPower', 0);\n    return msg;\n}\n\n// FALL B: Entladen freigeben â€“ entweder nachts oder nach Vollladung\nif (isNight || fullChargeReached) {\n    if (currentOutputLimit === MAX_DISCHARGE_POWER) return null;\n    msg.payload = MAX_DISCHARGE_POWER;\n    flow.set('lastSetPower', MAX_DISCHARGE_POWER);\n    return msg;\n}\n\n// FALL C: TagsÃ¼ber & noch nicht voll â†’ nix freigeben\nif (!isNight && !fullChargeReached) {\n    if (currentOutputLimit === 0) return null;\n    msg.payload = 0;\n    flow.set('lastSetPower', 0);\n    return msg;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 620,
        "wires": [
            [
                "d1b511127a269d86"
            ]
        ]
    },
    {
        "id": "c195f915de1f9db5",
        "type": "link in",
        "z": "a6d6182e67d93116",
        "g": "64dfd012be86c1fe",
        "name": "link in 104",
        "links": [
            "4aededdd0f65f7c9"
        ],
        "x": 625,
        "y": 580,
        "wires": [
            [
                "dc39e4c7769a9baa"
            ]
        ]
    },
    {
        "id": "f11497e191e7401d",
        "type": "link out",
        "z": "a6d6182e67d93116",
        "g": "64dfd012be86c1fe",
        "name": "link out 20",
        "mode": "link",
        "links": [
            "b5ea0e7198b01863"
        ],
        "x": 915,
        "y": 660,
        "wires": []
    },
    {
        "id": "d1b511127a269d86",
        "type": "gate",
        "z": "a6d6182e67d93116",
        "g": "9532c2aa994c9ed4",
        "name": "STOP",
        "controlTopic": "gate_control",
        "defaultState": "open",
        "openCmd": "false",
        "closeCmd": "true",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "default",
        "x": 430,
        "y": 620,
        "wires": [
            [
                "9f10f3863ebe0905"
            ]
        ]
    },
    {
        "id": "cc8577dfb9032247",
        "type": "comment",
        "z": "a6d6182e67d93116",
        "g": "64dfd012be86c1fe",
        "name": "Low-Voltage Sperre",
        "info": "",
        "x": 760,
        "y": 540,
        "wires": []
    },
    {
        "id": "b6ea36b48fad195f",
        "type": "link out",
        "z": "a6d6182e67d93116",
        "g": "64dfd012be86c1fe",
        "name": "link out 21",
        "mode": "link",
        "links": [
            "1452c531c66ce676"
        ],
        "x": 915,
        "y": 620,
        "wires": []
    },
    {
        "id": "1452c531c66ce676",
        "type": "link in",
        "z": "a6d6182e67d93116",
        "g": "9532c2aa994c9ed4",
        "name": "link in 105",
        "links": [
            "b6ea36b48fad195f"
        ],
        "x": 395,
        "y": 580,
        "wires": [
            [
                "d1b511127a269d86"
            ]
        ]
    },
    {
        "id": "e7e3f192e3289e95",
        "type": "comment",
        "z": "a6d6182e67d93116",
        "name": "Zendure Solarflow Control",
        "info": "",
        "x": 150,
        "y": 60,
        "wires": []
    },
    {
        "id": "dc39e4c7769a9baa",
        "type": "function",
        "z": "a6d6182e67d93116",
        "g": "64dfd012be86c1fe",
        "name": "low_minVol Flag",
        "func": "// === Erweiterte Entlade-Sperrlogik mit Nacht-Flag ==========================\n// Ziel: Verhindert Entladung bei kritischer Zellspannung wÃ¤hrend Nacht\n//       â†’ Sperre bleibt aktiv BIS zum nÃ¤chsten Tag (isNight = false)\n//       â†’ Kein recover nÃ¶tig â€“ Entladung wird erst am nÃ¤chsten Tag wieder erlaubt\n// ===========================================================================\n\nlet minVol   = msg.payload.minVol;                          // z.â€¯B. 3.04â€¯V aktuelle Zellspannung\nlet limit    = flow.get(\"low_minVol\") || 3.10;              // minVol-Schwelle z.â€¯B. 3.10â€¯V\nlet isNight  = global.get(\"isNight\");                       // Status: NachtaktivitÃ¤t laut Tageslogik\nlet isLocked = flow.get(\"lowVoltageLock\") || false;         // Aktueller Gate-Sperrzustand\nlet nightLock = flow.get(\"voltageLockActiveDuringNight\") || false; // Nachtbasierte Sperre\n\n// ðŸŸ  Fall 1: Zellspannung zu niedrig + Nacht â†’ Nacht-Sperre setzen\nif (minVol <= limit && isNight) {\n    flow.set(\"voltageLockActiveDuringNight\", true);         // Nacht-Flag merken\n    flow.set(\"lowVoltageLock\", true);                       // Gate sperren\n}\n\n// ðŸŸ¢ Fall 2: Es ist wieder Tag (isNight = false) â†’ Nacht-Sperre aufheben\nif (!isNight && nightLock) {\n    flow.set(\"voltageLockActiveDuringNight\", false);        // Flag lÃ¶schen\n    flow.set(\"lowVoltageLock\", false);                      // Gate entsperren\n}\n\n// ðŸ” Hinweis: Der minVol-Wert wird nur beim Sperren berÃ¼cksichtigt\n//            Die Entsperrung erfolgt ausschlieÃŸlich bei Tageswechsel\n\n// ðŸ›Ž Ausgabe: IMMER ein Steuerobjekt fÃ¼r das Gate zurÃ¼ckgeben\nmsg.topic   = \"gate_control\";\nmsg.payload = flow.get(\"lowVoltageLock\");                   // true â†’ Gate zu, false â†’ Gate auf\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 580,
        "wires": [
            [
                "c8784ffffe2432fb",
                "a722bc3a300f190e"
            ]
        ]
    },
    {
        "id": "c8784ffffe2432fb",
        "type": "function",
        "z": "a6d6182e67d93116",
        "g": "64dfd012be86c1fe",
        "name": "Ausgabe 0 Watt",
        "func": "// === Entlade-Stopp Trigger auf Basis des Sperr-Flags ===================\n// Ziel: PrÃ¼fe das Sperrflag (lowVoltageLock) im Kontext\n// â†’ Falls aktiv (true): setze Payload = 0 (z.â€¯B. fÃ¼r Zendure OutputLimit)\n// â†’ Falls nicht aktiv: tue nichts\n// =======================================================================\n\nlet sperreAktiv = flow.get(\"lowVoltageLock\") || false;\n\nif (sperreAktiv) {\n    msg.payload = 0; // Entladung stoppen\n    return msg;\n}\n\n// Keine Sperre â†’ keine Ausgabe â†’ Flow ignoriert Nachricht\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 660,
        "wires": [
            [
                "f11497e191e7401d"
            ]
        ]
    },
    {
        "id": "a722bc3a300f190e",
        "type": "function",
        "z": "a6d6182e67d93116",
        "g": "64dfd012be86c1fe",
        "name": "Gate_Control",
        "func": "// === Gate-Trigger fÃ¼r Entladungssperre ===============================\n// Liest das Flag 'lowVoltageLock' aus dem Flow-Kontext\n// Gibt Steuerbefehl fÃ¼r Gate: true = GESCHLOSSEN, false = GEÃ–FFNET\n// topic: \"gate_control\" â†’ Gate hÃ¶rt darauf\n// ====================================================================\n\n// Sperrstatus lesen\nlet isLocked = flow.get(\"lowVoltageLock\") || false;\n\n// Topic definieren, auf das das Gate lauscht\nmsg.topic = \"gate_control\";\n\n// Payload je nach Zustand setzen\nmsg.payload = isLocked;  // true â†’ Gate zu, false â†’ Gate auf\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 620,
        "wires": [
            [
                "b6ea36b48fad195f"
            ]
        ]
    },
    {
        "id": "10a627aa5994d56a",
        "type": "subflow:2ee5f1be3938f82f",
        "z": "a6d6182e67d93116",
        "g": "316c8c1313ca9e4f",
        "name": "low_minVol",
        "x": 2090,
        "y": 640,
        "wires": []
    },
    {
        "id": "c7ebb93eb95ae7f9",
        "type": "inject",
        "z": "a6d6182e67d93116",
        "g": "5c33c43d92038f2a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 980,
        "y": 300,
        "wires": [
            [
                "b08aac420c404783"
            ]
        ]
    },
    {
        "id": "b08aac420c404783",
        "type": "function",
        "z": "a6d6182e67d93116",
        "g": "5c33c43d92038f2a",
        "name": "AccumulatedWh manuell setzen ",
        "func": "flow.set(\"realCapacity\", 7100);\nflow.set(\"accumulatedWh\", 4644);\nflow.set(\"virtualSOC\", 100);",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 300,
        "wires": []
    },
    {
        "id": "257b4cd4833af309",
        "type": "function",
        "z": "a6d6182e67d93116",
        "g": "75ba6db0cd14a9d2",
        "name": "SOC Berrechnung",
        "func": "// ----- ðŸ§± Konfiguration -----\nlet intervalSeconds = 10;                    // Takt in Sekunden\nlet nominalCapacity = flow.get(\"realCapacity\");\nif (nominalCapacity === undefined) {\n    nominalCapacity = 6720;                 // Initiale KapazitÃ¤t in Wh\n    flow.set(\"realCapacity\", nominalCapacity);\n}\n\n// ----- ðŸ”Œ Eingabewerte aus Payload -----\nlet inputPower = msg.payload.inputPower || 0;\nlet outputPower = msg.payload.outputPower || 0;\nlet maxVol = msg.payload.highestMaxVol || 0;\nlet minVol = msg.payload.lowestMinVol || 0;\n\n// ----- ðŸ§® Energieintegration -----\nlet deltaWh = (inputPower - outputPower) * (intervalSeconds / 3600); // Wh im Intervall\n\n// ----- ðŸ§  Akkumulierte Wh laden oder SOC aus Zellspannung schÃ¤tzen -----\nlet accuWh = flow.get(\"accumulatedWh\");\nif (accuWh === undefined) {\n    // ðŸ” Zellspannungs-basierte SOC-SchÃ¤tzung (LiFePOâ‚„ flache Kurve)\n    let socEstimate = 0;\n    if (maxVol >= 3.55) socEstimate = 100;\n    else if (maxVol >= 3.45) socEstimate = 90;\n    else if (maxVol >= 3.40) socEstimate = 80;\n    else if (maxVol >= 3.35) socEstimate = 70;\n    else if (maxVol >= 3.30) socEstimate = 60;\n    else if (maxVol >= 3.25) socEstimate = 50;\n    else if (maxVol >= 3.20) socEstimate = 40;\n    else if (maxVol >= 3.15) socEstimate = 30;\n    else if (maxVol >= 3.10) socEstimate = 20;\n    else socEstimate = 10;\n\n    accuWh = (nominalCapacity * socEstimate) / 100;\n    node.warn(`SOC-Modul initialisiert via Zellspannung â†’ SchÃ¤tzung: ${socEstimate}% (${accuWh.toFixed(0)} Wh)`);\n}\n\n// ----- ðŸ§± Akkumulation & Begrenzung -----\naccuWh += deltaWh;\naccuWh = Math.max(0, accuWh); // Unter null? Vergiss es.\n\n// ----- ðŸŽ¯ Volllade-Reset UND dynamische KapazitÃ¤tsanpassung -----\nif (maxVol >= 3.57 && inputPower < 10) {\n    // ðŸ§® Wenn mehr reingepumpt als ursprÃ¼ngliche Kapa â†’ anpassen\n    if (accuWh > nominalCapacity + 10) { // Toleranzgrenze 10 Wh\n        flow.set(\"realCapacity\", accuWh);\n        nominalCapacity = accuWh; // Sofort mit neuer Kapa weiterrechnen\n        node.warn(`ðŸ’¡ Neue KapazitÃ¤t erkannt: realCapacity = ${accuWh.toFixed(1)} Wh`);\n    }\n\n    // ðŸ”„ Reset SOC auf volle Kapa\n    accuWh = nominalCapacity;\n    node.warn(\"ðŸ”„ SOC Reset: Vollladung erkannt â†’ Akku auf KapazitÃ¤tswert gesetzt.\");\n}\n\n// ----- ðŸ“ SOC-Berechnung -----\naccuWh = Math.min(accuWh, nominalCapacity); // nie Ã¼ber 100 %\nlet soc = (accuWh / nominalCapacity) * 100;\nsoc = Math.max(0, Math.min(soc, 100));      // Clamp 0â€“100\n\n// ----- ðŸ’¾ Speicherung in Context -----\nflow.set(\"accumulatedWh\", accuWh);\nflow.set(\"virtualSOC\", soc);\n\n// ----- ðŸ“¦ Output fÃ¼r Weiterverarbeitung -----\nmsg.payload = {\n    virtualSOC: soc.toFixed(2),\n    accumulatedWh: accuWh.toFixed(2),\n    capacityWh: nominalCapacity.toFixed(1),\n    inputPower: inputPower,\n    outputPower: outputPower,\n    maxVol: maxVol,\n    minVol: minVol\n};\nmsg.topic = \"SOC_Berechnung\";\n\n// ----- ðŸŸ¢ Statusanzeige fÃ¼r Dashboard & Debug -----\nnode.status({\n    fill: \"green\",\n    shape: \"dot\",\n    text: `ðŸ¦Ž SOC: ${soc.toFixed(1)}â€¯% | Wh: ${accuWh.toFixed(0)}`\n});\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 380,
        "wires": [
            [
                "f4f05f6b435d80db"
            ]
        ]
    },
    {
        "id": "fd09d20ce29c0726",
        "type": "subflow:27076a40bd20d054",
        "z": "a6d6182e67d93116",
        "g": "75ba6db0cd14a9d2",
        "name": "SOC Berrechnung",
        "x": 490,
        "y": 380,
        "wires": [
            [
                "257b4cd4833af309"
            ]
        ]
    },
    {
        "id": "7f8ef6bddda33533",
        "type": "comment",
        "z": "a6d6182e67d93116",
        "g": "75ba6db0cd14a9d2",
        "name": "SOC Berrechnug nach In/Out",
        "info": "",
        "x": 520,
        "y": 340,
        "wires": []
    },
    {
        "id": "4d57afebd090dfb3",
        "type": "ioBroker out",
        "z": "a6d6182e67d93116",
        "g": "75ba6db0cd14a9d2",
        "name": "SOC_calc",
        "topic": "0_userdata.0.PV-Daten.SOC_calc",
        "ack": "true",
        "autoCreate": "false",
        "stateName": "",
        "role": "",
        "payloadType": "",
        "readonly": "",
        "stateUnit": "",
        "stateMin": "",
        "stateMax": "",
        "x": 680,
        "y": 440,
        "wires": []
    },
    {
        "id": "f4f05f6b435d80db",
        "type": "function",
        "z": "a6d6182e67d93116",
        "g": "75ba6db0cd14a9d2",
        "name": "Wert extrahieren",
        "func": "// Hole nur den virtualSOC aus msg.payload\nmsg.payload = parseFloat(msg.payload.virtualSOC);\nmsg.topic = \"0_userdata.0.PV-Daten.SOC_calc\"; // Datenpunkt in ioBroker\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 440,
        "wires": [
            [
                "4d57afebd090dfb3"
            ]
        ]
    }
]
