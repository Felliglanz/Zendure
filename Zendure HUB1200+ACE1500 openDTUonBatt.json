[
    {
        "id": "2068e9152daab042",
        "type": "subflow",
        "name": "Werte holen (2)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 240,
                "y": 360,
                "wires": [
                    {
                        "id": "ccf825a30b3d8d4b"
                    },
                    {
                        "id": "29d858427f49b802"
                    },
                    {
                        "id": "e5e4b814e1fe5a9c"
                    },
                    {
                        "id": "b07dee2fc532cc99"
                    },
                    {
                        "id": "9084dfbab046dbb8"
                    },
                    {
                        "id": "a2358e2cdbb1fbe9"
                    },
                    {
                        "id": "c25016e99b676882"
                    },
                    {
                        "id": "eed2680c7c25fb59"
                    },
                    {
                        "id": "e9955bfdb9476509"
                    },
                    {
                        "id": "e049ce036de29562"
                    },
                    {
                        "id": "17b7b40d5a7167cf"
                    },
                    {
                        "id": "92599d934d57c930"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1040,
                "y": 360,
                "wires": [
                    {
                        "id": "6acb8a0ffccd332c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 1040,
            "y": 420,
            "wires": [
                {
                    "id": "6acb8a0ffccd332c",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "ccf825a30b3d8d4b",
        "type": "ioBroker get",
        "z": "2068e9152daab042",
        "name": "batteryLevel",
        "topic": "euerDatenpunkt.electricLevel",
        "attrname": "payload",
        "payloadType": "value",
        "errOnInvalidState": "nothing",
        "x": 450,
        "y": 100,
        "wires": [
            [
                "ff789ec71c517e56"
            ]
        ]
    },
    {
        "id": "e5e4b814e1fe5a9c",
        "type": "ioBroker get",
        "z": "2068e9152daab042",
        "name": "sunsetTimestamp",
        "topic": "shuttercontrol.0.info.GoldenHour",
        "attrname": "payload",
        "payloadType": "value",
        "errOnInvalidState": "nothing",
        "x": 470,
        "y": 220,
        "wires": [
            [
                "538be5960210aca7"
            ]
        ]
    },
    {
        "id": "0ec3272a899dc430",
        "type": "comment",
        "z": "2068e9152daab042",
        "name": "Werte auslesen",
        "info": "",
        "x": 460,
        "y": 60,
        "wires": []
    },
    {
        "id": "b07dee2fc532cc99",
        "type": "ioBroker get",
        "z": "2068e9152daab042",
        "name": "sunriseTimestamp",
        "topic": "shuttercontrol.0.info.GoldenHourEnd",
        "attrname": "payload",
        "payloadType": "value",
        "errOnInvalidState": "nothing",
        "x": 470,
        "y": 280,
        "wires": [
            [
                "e53b0a409ebd25a9"
            ]
        ]
    },
    {
        "id": "9084dfbab046dbb8",
        "type": "ioBroker get",
        "z": "2068e9152daab042",
        "name": "Aktuelle Leistung BKW",
        "topic": "euerDatenpunkt.solarInputPower",
        "attrname": "payload",
        "payloadType": "value",
        "errOnInvalidState": "nothing",
        "x": 480,
        "y": 340,
        "wires": [
            [
                "ce0fe124620ebe5f"
            ]
        ]
    },
    {
        "id": "a2358e2cdbb1fbe9",
        "type": "ioBroker get",
        "z": "2068e9152daab042",
        "name": "Zustand AC Modus",
        "topic": "euerDatenpunkt.control.acMode",
        "attrname": "payload",
        "payloadType": "value",
        "errOnInvalidState": "nothing",
        "x": 470,
        "y": 400,
        "wires": [
            [
                "7b94f82d0c27c772"
            ]
        ]
    },
    {
        "id": "c25016e99b676882",
        "type": "ioBroker get",
        "z": "2068e9152daab042",
        "name": "Aktuelle AC Leistung",
        "topic": "euerDatenpunkt.inputLimit",
        "attrname": "payload",
        "payloadType": "value",
        "errOnInvalidState": "nothing",
        "x": 480,
        "y": 460,
        "wires": [
            [
                "f14fcb1c6dc27b03"
            ]
        ]
    },
    {
        "id": "29d858427f49b802",
        "type": "ioBroker get",
        "z": "2068e9152daab042",
        "name": "Aktuelle Leistung",
        "topic": "sonoff.0.Stromzaehler.MT691_P",
        "attrname": "payload",
        "payloadType": "value",
        "errOnInvalidState": "nothing",
        "x": 470,
        "y": 160,
        "wires": [
            [
                "5b312f55ad43c93c"
            ]
        ]
    },
    {
        "id": "eed2680c7c25fb59",
        "type": "ioBroker get",
        "z": "2068e9152daab042",
        "name": "SOC #1",
        "topic": "euerDatenpunkt.socLevel",
        "attrname": "payload",
        "payloadType": "value",
        "errOnInvalidState": "nothing",
        "x": 440,
        "y": 520,
        "wires": [
            [
                "119d3c573b90d48d"
            ]
        ]
    },
    {
        "id": "e9955bfdb9476509",
        "type": "ioBroker get",
        "z": "2068e9152daab042",
        "name": "SOC #2",
        "topic": "euerDatenpunkt.socLevel",
        "attrname": "payload",
        "payloadType": "value",
        "errOnInvalidState": "nothing",
        "x": 440,
        "y": 580,
        "wires": [
            [
                "c17fc84488a22573"
            ]
        ]
    },
    {
        "id": "e049ce036de29562",
        "type": "ioBroker get",
        "z": "2068e9152daab042",
        "name": "SOC #3",
        "topic": "euerDatenpunkt.socLevel",
        "attrname": "payload",
        "payloadType": "value",
        "errOnInvalidState": "nothing",
        "x": 440,
        "y": 640,
        "wires": [
            [
                "1cfdfc639903aae7"
            ]
        ]
    },
    {
        "id": "ff789ec71c517e56",
        "type": "function",
        "z": "2068e9152daab042",
        "name": "Message",
        "func": "msg.topic = \"batteryLevel\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 100,
        "wires": [
            [
                "6acb8a0ffccd332c"
            ]
        ]
    },
    {
        "id": "5b312f55ad43c93c",
        "type": "function",
        "z": "2068e9152daab042",
        "name": "Message",
        "func": "msg.topic = \"currentPower\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 160,
        "wires": [
            [
                "6acb8a0ffccd332c"
            ]
        ]
    },
    {
        "id": "538be5960210aca7",
        "type": "function",
        "z": "2068e9152daab042",
        "name": "Message",
        "func": "msg.topic = \"sunsetTimestamp\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 220,
        "wires": [
            [
                "6acb8a0ffccd332c"
            ]
        ]
    },
    {
        "id": "e53b0a409ebd25a9",
        "type": "function",
        "z": "2068e9152daab042",
        "name": "Message",
        "func": "msg.topic = \"sunriseTimestamp\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 280,
        "wires": [
            [
                "6acb8a0ffccd332c"
            ]
        ]
    },
    {
        "id": "f0ccb03cad3d43d1",
        "type": "comment",
        "z": "2068e9152daab042",
        "name": "Topic an msg ",
        "info": "",
        "x": 730,
        "y": 60,
        "wires": []
    },
    {
        "id": "ce0fe124620ebe5f",
        "type": "function",
        "z": "2068e9152daab042",
        "name": "Message",
        "func": "msg.topic = \"PV_Power\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 340,
        "wires": [
            [
                "6acb8a0ffccd332c"
            ]
        ]
    },
    {
        "id": "7b94f82d0c27c772",
        "type": "function",
        "z": "2068e9152daab042",
        "name": "Message",
        "func": "msg.topic = \"switchState\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 400,
        "wires": [
            [
                "6acb8a0ffccd332c"
            ]
        ]
    },
    {
        "id": "f14fcb1c6dc27b03",
        "type": "function",
        "z": "2068e9152daab042",
        "name": "Message",
        "func": "msg.topic = \"AC_Power\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 460,
        "wires": [
            [
                "6acb8a0ffccd332c"
            ]
        ]
    },
    {
        "id": "119d3c573b90d48d",
        "type": "function",
        "z": "2068e9152daab042",
        "name": "Message",
        "func": "msg.topic = \"SOC_1\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 520,
        "wires": [
            [
                "6acb8a0ffccd332c"
            ]
        ]
    },
    {
        "id": "c17fc84488a22573",
        "type": "function",
        "z": "2068e9152daab042",
        "name": "Message",
        "func": "msg.topic = \"SOC_2\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 580,
        "wires": [
            [
                "6acb8a0ffccd332c"
            ]
        ]
    },
    {
        "id": "1cfdfc639903aae7",
        "type": "function",
        "z": "2068e9152daab042",
        "name": "Message",
        "func": "msg.topic = \"SOC_3\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 640,
        "wires": [
            [
                "6acb8a0ffccd332c"
            ]
        ]
    },
    {
        "id": "6acb8a0ffccd332c",
        "type": "join",
        "z": "2068e9152daab042",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "6",
        "count": "12",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 930,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "cb73eb897a70eea0",
        "type": "comment",
        "z": "2068e9152daab042",
        "name": "Zusammenfassen der msg",
        "info": "",
        "x": 990,
        "y": 320,
        "wires": []
    },
    {
        "id": "17b7b40d5a7167cf",
        "type": "ioBroker get",
        "z": "2068e9152daab042",
        "name": "Zellspannung minVol",
        "topic": "0_userdata.0.Zendure_Werte.minVol",
        "attrname": "payload",
        "payloadType": "value",
        "errOnInvalidState": "nothing",
        "x": 480,
        "y": 700,
        "wires": [
            [
                "448cc3ad475eccab"
            ]
        ]
    },
    {
        "id": "448cc3ad475eccab",
        "type": "function",
        "z": "2068e9152daab042",
        "name": "Message",
        "func": "msg.topic = \"minVol\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 700,
        "wires": [
            [
                "6acb8a0ffccd332c"
            ]
        ]
    },
    {
        "id": "92599d934d57c930",
        "type": "ioBroker get",
        "z": "2068e9152daab042",
        "name": "Aktuelles Output Limit",
        "topic": "euerDatenpunkt.outputLimit",
        "attrname": "payload",
        "payloadType": "value",
        "errOnInvalidState": "nothing",
        "x": 480,
        "y": 760,
        "wires": [
            [
                "dd397a2fcb5a7916"
            ]
        ]
    },
    {
        "id": "dd397a2fcb5a7916",
        "type": "function",
        "z": "2068e9152daab042",
        "name": "Message",
        "func": "msg.topic = \"OutputLimit\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 760,
        "wires": [
            [
                "6acb8a0ffccd332c"
            ]
        ]
    },
    {
        "id": "c40c1e43832f39ef",
        "type": "subflow",
        "name": "Subflow 1",
        "info": "",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "177ee8f3d9c4c780"
                    }
                ]
            }
        ],
        "out": [],
        "status": {
            "x": 500,
            "y": 140,
            "wires": [
                {
                    "id": "79ef86188b9ddbf9",
                    "port": 0
                },
                {
                    "id": "89fd4e23d9c9fa95",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "177ee8f3d9c4c780",
        "type": "switch",
        "z": "c40c1e43832f39ef",
        "name": "true/false",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 200,
        "y": 100,
        "wires": [
            [
                "79ef86188b9ddbf9"
            ],
            [
                "89fd4e23d9c9fa95"
            ]
        ]
    },
    {
        "id": "79ef86188b9ddbf9",
        "type": "change",
        "z": "c40c1e43832f39ef",
        "name": "DPL Mode 2",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "2",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 80,
        "wires": [
            [
                "74180cd5d3481d8a"
            ]
        ]
    },
    {
        "id": "89fd4e23d9c9fa95",
        "type": "change",
        "z": "c40c1e43832f39ef",
        "name": "DPL Mode 0",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 120,
        "wires": [
            [
                "74180cd5d3481d8a"
            ]
        ]
    },
    {
        "id": "74180cd5d3481d8a",
        "type": "ioBroker out",
        "z": "c40c1e43832f39ef",
        "name": "DPL 0/2",
        "topic": "mqtt.0.OpenDTU.powerlimiter.cmd.mode",
        "ack": "false",
        "autoCreate": "false",
        "stateName": "",
        "role": "",
        "payloadType": "",
        "readonly": "",
        "stateUnit": "",
        "stateMin": "",
        "stateMax": "",
        "x": 540,
        "y": 100,
        "wires": []
    },
    {
        "id": "4b7c801ae4eded37",
        "type": "subflow",
        "name": "Manueller Ladestop (2)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 100,
                "wires": [
                    {
                        "id": "e096f17dedf32b24"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 500,
                "y": 120,
                "wires": [
                    {
                        "id": "ff89b1a32fd15133",
                        "port": 0
                    },
                    {
                        "id": "770b1ddb5eb2b2d2",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "e096f17dedf32b24",
        "type": "switch",
        "z": "4b7c801ae4eded37",
        "name": "True oder False",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 220,
        "y": 100,
        "wires": [
            [
                "ff89b1a32fd15133"
            ],
            [
                "770b1ddb5eb2b2d2"
            ]
        ]
    },
    {
        "id": "ff89b1a32fd15133",
        "type": "change",
        "z": "4b7c801ae4eded37",
        "name": "Gate zu",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 80,
        "wires": [
            [
                "b6d92b1027830dff"
            ]
        ]
    },
    {
        "id": "770b1ddb5eb2b2d2",
        "type": "change",
        "z": "4b7c801ae4eded37",
        "name": "Gate auf",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "b6d92b1027830dff",
        "type": "change",
        "z": "4b7c801ae4eded37",
        "name": "Laden 0 Watt",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 80,
        "wires": [
            [
                "5510b4a0abab1b42"
            ]
        ]
    },
    {
        "id": "5510b4a0abab1b42",
        "type": "ioBroker out",
        "z": "4b7c801ae4eded37",
        "name": "ACE1500 Ladeleistung",
        "topic": "euerDatenpunkt.setInputLimit",
        "ack": "false",
        "autoCreate": "false",
        "stateName": "",
        "role": "",
        "payloadType": "",
        "readonly": "",
        "stateUnit": "",
        "stateMin": "",
        "stateMax": "",
        "x": 740,
        "y": 80,
        "wires": []
    },
    {
        "id": "99a57f0ac196b1b7",
        "type": "subflow",
        "name": "STOP Heizung (2)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 120,
                "wires": [
                    {
                        "id": "7ebd3fe4bb8c8f7b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 540,
                "y": 200,
                "wires": [
                    {
                        "id": "ac71db116d4afc3a",
                        "port": 0
                    },
                    {
                        "id": "548565182a201cf7",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "7ebd3fe4bb8c8f7b",
        "type": "switch",
        "z": "99a57f0ac196b1b7",
        "name": "True oder False",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 200,
        "y": 120,
        "wires": [
            [
                "548565182a201cf7"
            ],
            [
                "ac71db116d4afc3a"
            ]
        ]
    },
    {
        "id": "ac71db116d4afc3a",
        "type": "change",
        "z": "99a57f0ac196b1b7",
        "name": "Gate auf",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "548565182a201cf7",
        "type": "change",
        "z": "99a57f0ac196b1b7",
        "name": "Gate zu",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 100,
        "wires": [
            [
                "e0f8504c4643accf",
                "155ce14ac321d97e"
            ]
        ]
    },
    {
        "id": "e0f8504c4643accf",
        "type": "change",
        "z": "99a57f0ac196b1b7",
        "name": "Heizung aus ",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 80,
        "wires": [
            [
                "cf459e5f7bb33d47"
            ]
        ],
        "outputLabels": [
            "2"
        ]
    },
    {
        "id": "155ce14ac321d97e",
        "type": "change",
        "z": "99a57f0ac196b1b7",
        "name": "Heizung aus",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 140,
        "wires": [
            [
                "618135ec06e58646"
            ]
        ],
        "outputLabels": [
            "2"
        ]
    },
    {
        "id": "cf459e5f7bb33d47",
        "type": "ioBroker out",
        "z": "99a57f0ac196b1b7",
        "name": "Heizung",
        "topic": "hmip.0.devices.xxxx.channels.1.on",
        "ack": "false",
        "autoCreate": "false",
        "stateName": "",
        "role": "",
        "payloadType": "",
        "readonly": "",
        "stateUnit": "",
        "stateMin": "",
        "stateMax": "",
        "x": 760,
        "y": 80,
        "wires": []
    },
    {
        "id": "618135ec06e58646",
        "type": "ioBroker out",
        "z": "99a57f0ac196b1b7",
        "name": "Heizung",
        "topic": "hmip.0.devices.xxxx.channels.1.on",
        "ack": "false",
        "autoCreate": "false",
        "stateName": "",
        "role": "",
        "payloadType": "",
        "readonly": "",
        "stateUnit": "",
        "stateMin": "",
        "stateMax": "",
        "x": 760,
        "y": 140,
        "wires": []
    },
    {
        "id": "1d1461f6e2076192",
        "type": "subflow",
        "name": "Manueller Entladestop (2)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "10f705436d23c829"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 440,
                "y": 100,
                "wires": [
                    {
                        "id": "47c075f894237e7b",
                        "port": 0
                    },
                    {
                        "id": "407a1b7963f28183",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "10f705436d23c829",
        "type": "switch",
        "z": "1d1461f6e2076192",
        "name": "True oder False",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 160,
        "y": 80,
        "wires": [
            [
                "47c075f894237e7b"
            ],
            [
                "407a1b7963f28183"
            ]
        ]
    },
    {
        "id": "47c075f894237e7b",
        "type": "change",
        "z": "1d1461f6e2076192",
        "name": "Gate zu",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 60,
        "wires": [
            [
                "39d806d1bf07081c"
            ]
        ]
    },
    {
        "id": "407a1b7963f28183",
        "type": "change",
        "z": "1d1461f6e2076192",
        "name": "Gate auf",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "39d806d1bf07081c",
        "type": "change",
        "z": "1d1461f6e2076192",
        "name": "Ausgang 0 Watt",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 60,
        "wires": [
            [
                "7f22fcbb1bcbc7f5"
            ]
        ]
    },
    {
        "id": "7f22fcbb1bcbc7f5",
        "type": "ioBroker out",
        "z": "1d1461f6e2076192",
        "name": "HUB1200 Ausgangsleistung",
        "topic": "euerDatenpunkt.setOutputLimit",
        "ack": "false",
        "autoCreate": "false",
        "stateName": "",
        "role": "",
        "payloadType": "",
        "readonly": "",
        "stateUnit": "",
        "stateMin": "",
        "stateMax": "",
        "x": 720,
        "y": 60,
        "wires": []
    },
    {
        "id": "b3248e9c51eda898",
        "type": "subflow",
        "name": "Manuelles Notladen (2)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 120,
                "wires": [
                    {
                        "id": "7f7a8aae1cbc5889"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 540,
                "y": 260,
                "wires": [
                    {
                        "id": "1f99e16cfb9a7309",
                        "port": 0
                    },
                    {
                        "id": "cbf0ced4e0c33aec",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "7f7a8aae1cbc5889",
        "type": "switch",
        "z": "b3248e9c51eda898",
        "name": "True oder False",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 220,
        "y": 120,
        "wires": [
            [
                "cbf0ced4e0c33aec"
            ],
            [
                "1f99e16cfb9a7309"
            ]
        ]
    },
    {
        "id": "1f99e16cfb9a7309",
        "type": "change",
        "z": "b3248e9c51eda898",
        "name": "Gate auf",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "cbf0ced4e0c33aec",
        "type": "change",
        "z": "b3248e9c51eda898",
        "name": "Gate zu",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 100,
        "wires": [
            [
                "cfb33fe1dfca345f",
                "d74f84c726ee18fa",
                "7a61b0f68ba85750"
            ]
        ]
    },
    {
        "id": "cfb33fe1dfca345f",
        "type": "change",
        "z": "b3248e9c51eda898",
        "name": "Entladen 0 Watt",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 80,
        "wires": [
            [
                "c4a04e0aa0f73882"
            ]
        ],
        "outputLabels": [
            "2"
        ]
    },
    {
        "id": "c4a04e0aa0f73882",
        "type": "ioBroker out",
        "z": "b3248e9c51eda898",
        "name": "HUB1200 Ausgang",
        "topic": "euerDatenpunkt.setOutputLimit",
        "ack": "false",
        "autoCreate": "false",
        "stateName": "",
        "role": "",
        "payloadType": "",
        "readonly": "",
        "stateUnit": "",
        "stateMin": "",
        "stateMax": "",
        "x": 910,
        "y": 80,
        "wires": []
    },
    {
        "id": "d74f84c726ee18fa",
        "type": "change",
        "z": "b3248e9c51eda898",
        "name": "Laden 900 Watt",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "900",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 200,
        "wires": [
            [
                "b295f25a86bb4c97"
            ]
        ],
        "outputLabels": [
            "2"
        ]
    },
    {
        "id": "4fc93cb3541fb718",
        "type": "ioBroker out",
        "z": "b3248e9c51eda898",
        "name": "ACE1500 Eingang",
        "topic": "euerDatenpunkt.setInputLimit",
        "ack": "false",
        "autoCreate": "false",
        "stateName": "",
        "role": "",
        "payloadType": "",
        "readonly": "",
        "stateUnit": "",
        "stateMin": "",
        "stateMax": "",
        "x": 910,
        "y": 200,
        "wires": []
    },
    {
        "id": "7a61b0f68ba85750",
        "type": "change",
        "z": "b3248e9c51eda898",
        "name": "AC Switch auf 1",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 140,
        "wires": [
            [
                "37a17d455b37cd9a"
            ]
        ]
    },
    {
        "id": "316b4567b0cedce5",
        "type": "ioBroker out",
        "z": "b3248e9c51eda898",
        "name": "AC Switch",
        "topic": "euerDatenpunkt.acMode",
        "ack": "false",
        "autoCreate": "false",
        "stateName": "",
        "role": "",
        "payloadType": "",
        "readonly": "",
        "stateUnit": "",
        "stateMin": "",
        "stateMax": "",
        "x": 890,
        "y": 140,
        "wires": []
    },
    {
        "id": "37a17d455b37cd9a",
        "type": "delay",
        "z": "b3248e9c51eda898",
        "name": "10s",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 750,
        "y": 140,
        "wires": [
            [
                "316b4567b0cedce5"
            ]
        ]
    },
    {
        "id": "b295f25a86bb4c97",
        "type": "delay",
        "z": "b3248e9c51eda898",
        "name": "10s",
        "pauseType": "delay",
        "timeout": "20",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 750,
        "y": 200,
        "wires": [
            [
                "4fc93cb3541fb718"
            ]
        ]
    },
    {
        "id": "020dd469b36ad941",
        "type": "tab",
        "label": "Zendure mit open DTU",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "cd1a21266e4298d4",
        "type": "group",
        "z": "020dd469b36ad941",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "eff6a96a9242c508",
            "e8e503fa199ee83f",
            "dcfd7e455a269475",
            "159c0fd9407ddb0c",
            "752440c759cd639a"
        ],
        "x": 834,
        "y": 19,
        "w": 352,
        "h": 242
    },
    {
        "id": "c3e801838d128007",
        "type": "group",
        "z": "020dd469b36ad941",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "41a8016bcaacb1bd",
            "1a5ffaab5c8b9314",
            "d7cd429fdfe65a06",
            "9df0ccab50ad4dcf",
            "05e4efd36602a723",
            "b9965d527f6c0d43",
            "392c1653ba960118",
            "a6d810384aba9eaf",
            "56aa407a3b1d5b4f",
            "f7d98aaf7e4aa276"
        ],
        "x": 54,
        "y": 999,
        "w": 852,
        "h": 202
    },
    {
        "id": "bc31f09bd4cc7f2f",
        "type": "group",
        "z": "020dd469b36ad941",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b5814e95e45c7be5",
            "34a42c04883ba0f0",
            "336b2047e95a448e",
            "580381201b86df60",
            "ab68b32c31ca90fd",
            "d1db0afd604e12e1"
        ],
        "x": 54,
        "y": 1219,
        "w": 572,
        "h": 162
    },
    {
        "id": "336629f1c18b63c0",
        "type": "group",
        "z": "020dd469b36ad941",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "8efd6e550967c215",
            "46e875f33513e9ac",
            "b6dfa43f18f7b3fb",
            "f941ef879931afe3",
            "76c1aab072054bc4",
            "9786da992176357f",
            "f4f2db65d83ebd9b",
            "938bd990165c50f1",
            "be503290814cba50",
            "f3820c9345a5992c",
            "875260279e6abf48",
            "c74a6d819f326e98",
            "e636c982a8edcc88",
            "5cffe1610931e636",
            "65fac77d13c9a690",
            "771162acacbd6d3d",
            "f598d95b0261933f",
            "22a60194b196276c",
            "fdc82232e11ad6e0",
            "83e668928ed69cb3"
        ],
        "x": 54,
        "y": 639,
        "w": 972,
        "h": 342
    },
    {
        "id": "5dfb2ca620f8ba32",
        "type": "group",
        "z": "020dd469b36ad941",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "33464fae3cfccb37",
            "8c79f20645284fd6",
            "fd59af521e79377f",
            "ff54f943f776f3d7",
            "018a310f5d3a8d26",
            "6b6896d46b12929f",
            "7603986005ccd1dd"
        ],
        "x": 1184,
        "y": 359,
        "w": 342,
        "h": 262
    },
    {
        "id": "ddbf43a7cc2b3d10",
        "type": "group",
        "z": "020dd469b36ad941",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "fdba1bd01c4f8bc2",
            "2e8646cc463bea2e",
            "837267556f523fe7",
            "2a929dcdb775304c",
            "8fc042a90c184209",
            "5bd105eefa7470d6",
            "fd73b1b12ef06c5d",
            "4434a1b8c3db9122",
            "7c2c306c4c850a63",
            "e80ef258146890f3",
            "bea0051fe19d155c",
            "71174763041f418f",
            "f697cca0c42396cd",
            "8987c067991842f8",
            "268fa24106c14510",
            "3f05dbb61374556b"
        ],
        "x": 494,
        "y": 279,
        "w": 672,
        "h": 342
    },
    {
        "id": "b116639d1cfd4f41",
        "type": "group",
        "z": "020dd469b36ad941",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "31f5f5048ecf4d44",
            "94956350e8b5d570",
            "93eadb933f37db46",
            "59fca43fb6ce0407",
            "16c717c5c63893e0"
        ],
        "x": 54,
        "y": 59,
        "w": 422,
        "h": 122
    },
    {
        "id": "416e081e17ad8217",
        "type": "group",
        "z": "020dd469b36ad941",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "379bbff511c04b12",
            "238d95873930344f",
            "fa30145de005e971",
            "ac9ed8ecdd1d16fd",
            "8be2dfa38f6009c2",
            "0efe6d8135ded79c",
            "3721fd3e28a55028",
            "c5f8a54c9c154e23"
        ],
        "x": 54,
        "y": 359,
        "w": 412,
        "h": 262
    },
    {
        "id": "c19c7b861b47dfc5",
        "type": "group",
        "z": "020dd469b36ad941",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "ce08ef40adcd574e",
            "c9cbe4e64fd7e6e8",
            "706d094ff3994714",
            "0ffce5cb3e32238b"
        ],
        "x": 1574,
        "y": 199,
        "w": 482,
        "h": 142
    },
    {
        "id": "1434d9cebc1326ec",
        "type": "group",
        "z": "020dd469b36ad941",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "ff4bd3ee12bb84ca",
            "0cc84d8010107dd0",
            "45aca6a7eeed575d",
            "3c13f57a73e3f1c1"
        ],
        "x": 1574,
        "y": 39,
        "w": 462,
        "h": 142
    },
    {
        "id": "2d37ba3ce29b1824",
        "type": "group",
        "z": "020dd469b36ad941",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "20f8e63bd7445519",
            "7846f426ea243804",
            "f71f323561fea322",
            "dcf6ae60cc7cbbcf"
        ],
        "x": 1574,
        "y": 359,
        "w": 442,
        "h": 142
    },
    {
        "id": "9335832ed1f262f3",
        "type": "group",
        "z": "020dd469b36ad941",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "2b55c806bec293a1",
            "41c4d13beec1cc24",
            "3eca682db667aedd",
            "abf97d0a293d4ef5"
        ],
        "x": 1574,
        "y": 519,
        "w": 532,
        "h": 162
    },
    {
        "id": "c4aca8aa58ccff5e",
        "type": "group",
        "z": "020dd469b36ad941",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "ac098a2261219426",
            "322f81df55f41c80",
            "bb0e73f12b613cd7",
            "5f11a6ba1c54127d"
        ],
        "x": 1574,
        "y": 699,
        "w": 442,
        "h": 142
    },
    {
        "id": "1882fa1ccbe60c1a",
        "type": "group",
        "z": "020dd469b36ad941",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "9a3b6d4bdec8130d",
            "1f178389ce250c60",
            "80a410983927788a"
        ],
        "x": 1574,
        "y": 859,
        "w": 352,
        "h": 122
    },
    {
        "id": "ebda871312c2f825",
        "type": "group",
        "z": "020dd469b36ad941",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "50f6609c7977589d",
            "39f7688f8a85951e",
            "89a87ccd7f46e6f9",
            "2a1ea16a58a81f5e"
        ],
        "x": 54,
        "y": 199,
        "w": 312,
        "h": 142
    },
    {
        "id": "4768669e8ab42ccf",
        "type": "group",
        "z": "020dd469b36ad941",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "54871e9574e1a7f4",
            "085268425dce3c6f",
            "c23474f9f0e39ca5"
        ],
        "x": 494,
        "y": 139,
        "w": 312,
        "h": 122
    },
    {
        "id": "eff6a96a9242c508",
        "type": "function",
        "z": "020dd469b36ad941",
        "g": "cd1a21266e4298d4",
        "name": "SOC-History",
        "func": "// Hole den aktuellen SoC-Wert\nlet currentSoC = msg.payload.batteryLevel;\n\n// Hole die Historie und den letzten gespeicherten Tag aus dem Flow Context\nlet socHistory = flow.get('socHistory') || [];\nlet lastSavedDate = flow.get('lastSavedDate') || '';\n\n// Hole den dynamischen Schwellenwert für volle Ladung aus dem globalen Kontext\nlet fullChargeThreshold = global.get('FULL_CHARGE_THRESHOLD'); // z.B. 98 oder 100 (variabel)\n\n// Berechne das heutige Datum im Format \"YYYY-MM-DD\"\nlet today = new Date().toISOString().split('T')[0];\n\n// Hole den Sonnenuntergangszeitstempel (Format \"HH:MM\") und erzeuge das Datum für heute\nlet sunsetTimestamp = msg.payload.sunsetTimestamp;\nlet sunsetDate = new Date();\nlet [sunsetHours, sunsetMinutes] = sunsetTimestamp.split(':').map(Number);\nsunsetDate.setHours(sunsetHours, sunsetMinutes, 0, 0);\n\n// 1. Fall: Full-Charge-Schwelle erreicht bzw. überschritten und noch kein Eintrag für heute\nif (currentSoC >= fullChargeThreshold && today !== lastSavedDate) {\n    let currentTime = new Date().toISOString();\n    \n    // Speichere den SOC-Wert zusammen mit dem aktuellen Schwellenwert\n    socHistory.push({ \n        time: currentTime, \n        value: currentSoC, \n        threshold: fullChargeThreshold \n    });\n    \n    // Begrenze die Historie auf die letzten 30 Einträge\n    if (socHistory.length > 30) {\n        socHistory.shift(); // Entferne den ältesten Eintrag\n    }\n    \n    flow.set('socHistory', socHistory);\n    flow.set('lastSavedDate', today);\n} \n// 2. Fall: Nach Sonnenuntergang – falls bis dahin kein Eintrag mit dem Schwellenwert von heute vorliegt\nelse if (today !== lastSavedDate && new Date() > sunsetDate) {\n    // Prüfe, ob bereits ein Eintrag für heute existiert, der den Schwellenwert erreicht oder überschritten hat\n    if (!socHistory.some(entry =>\n            entry.time.split('T')[0] === today &&\n            parseFloat(entry.value) >= parseFloat(fullChargeThreshold)\n        )) {\n        let currentTime = new Date().toISOString();\n        \n        // Speichere den aktuellen SOC-Wert und den tagesaktuellen Schwellenwert\n        socHistory.push({ \n            time: currentTime, \n            value: currentSoC, \n            threshold: fullChargeThreshold \n        });\n        \n        if (socHistory.length > 30) {\n            socHistory.shift();\n        }\n        \n        flow.set('socHistory', socHistory);\n        flow.set('lastSavedDate', today);\n    }\n}\n\nreturn msg;\n",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 140,
        "wires": []
    },
    {
        "id": "e8e503fa199ee83f",
        "type": "comment",
        "z": "020dd469b36ad941",
        "g": "cd1a21266e4298d4",
        "name": "SOC-Regelung",
        "info": "",
        "x": 1020,
        "y": 60,
        "wires": []
    },
    {
        "id": "dcfd7e455a269475",
        "type": "function",
        "z": "020dd469b36ad941",
        "g": "cd1a21266e4298d4",
        "name": "SOC Dynamik",
        "func": "// Aktuelle Werte aus dem Flow abrufen\nlet socHistory = flow.get('socHistory') || [];\nlet reducedChargeDaysHistory = flow.get('reducedChargeDaysHistory') || []; // Initialisiere, falls nicht existiert\n\nlet fullChargeThreshold = global.get('FULL_CHARGE_THRESHOLD') || 100;\nlet reducedChargeThreshold = 100;\nlet maxChargeThreshold = 100; // Maximale Ladegrenze\n\n// Variable: Anzahl der Tage mit reduzierter Ladegrenze\nlet reducedChargeDays = flow.get('reducedChargeDays') || 4; // Standardmäßig 4 Tage\n\n// Aktuelles Datum\nlet today = new Date();\n\n// Zeitpunkt berechnen, ab dem geprüft wird\nlet reducedChargeStart = new Date(today.getTime() - reducedChargeDays * 24 * 60 * 60 * 1000);\n\n// Funktion: Wurde der Akku innerhalb der reducedChargeDays auf 100% geladen?\nfunction wasFullyChargedRecently() {\n    return socHistory.some(entry =>\n        Number(entry.value) === maxChargeThreshold &&\n        new Date(entry.time) >= reducedChargeStart\n    );\n}\n\n// Funktion: Hat der Akku innerhalb der reducedChargeDays die reduzierte Ladegrenze erreicht?\nfunction wasReducedChargeRecently() {\n    return reducedChargeDaysHistory.some(entry =>\n        new Date(entry.time) >= reducedChargeStart\n    );\n}\n\n// Letzten SOC-Eintrag abrufen\nlet lastSocEntry = socHistory.length > 0 ? socHistory[socHistory.length - 1] : null;\nlet lastSocDate = lastSocEntry ? new Date(lastSocEntry.time) : null;\n\n/*\n// Debug-Ausgaben\n// node.warn(\"Letzter SOC-Eintrag: \" + JSON.stringify(lastSocEntry));\n// node.warn(\"ReducedChargeDaysHistory: \" + JSON.stringify(reducedChargeDaysHistory));\n*/\n\n// Prüfen, ob der letzte SOC-Eintrag von gestern ist\nlet yesterday = new Date(today);\nyesterday.setDate(yesterday.getDate() - 1);\n\nlet isSameDate = lastSocDate &&\n    lastSocDate.getFullYear() === yesterday.getFullYear() &&\n    lastSocDate.getMonth() === yesterday.getMonth() &&\n    lastSocDate.getDate() === yesterday.getDate();\n\n// Sicherstellen, dass die Werte Zahlen sind\nlet lastSocValue = lastSocEntry ? Number(lastSocEntry.value) : null;\n\n/*\n// Weitere Debug-Ausgaben\n// node.warn(\"Ist der letzte SOC-Eintrag von gestern? \" + isSameDate);\n// node.warn(\"Letzter SOC-Wert: \" + lastSocValue);\n*/\n\n// Toleranzwerte (werden hier nicht mehr verwendet, da wirklich exakte 100% benötigt werden)\n// let tolerance = 2; // Toleranz in Prozent\n\n// Wenn der Akku gestern exakt 100% erreicht hat, Ladegrenze auf reducedChargeThreshold setzen\nif (\n    lastSocEntry &&\n    lastSocValue === maxChargeThreshold &&\n    isSameDate\n) {\n    // Ladegrenze auf reducedChargeThreshold setzen\n    fullChargeThreshold = reducedChargeThreshold;\n    /*\n    node.warn(`🔋 Akku hat gestern ${lastSocValue}% erreicht - Ladegrenze auf ${reducedChargeThreshold}% gesetzt`);\n    */\n    \n    // ReducedChargeDays-History aktualisieren\n    reducedChargeDaysHistory.push({ time: today.toISOString() });\n\n    // Alte Einträge entfernen, die außerhalb des reducedChargeDays-Fensters liegen\n    reducedChargeDaysHistory = reducedChargeDaysHistory.filter(entry =>\n        new Date(entry.time) >= reducedChargeStart\n    );\n    \n    // Begrenze die ReducedChargeDays-History auf maximal 30 Einträge\n    if (reducedChargeDaysHistory.length > 30) {\n        reducedChargeDaysHistory = reducedChargeDaysHistory.slice(-30);\n    }\n    \n    // Aktualisierte History im Flow speichern\n    flow.set('reducedChargeDaysHistory', reducedChargeDaysHistory);\n    // node.warn(\"Aktualisierte ReducedChargeDaysHistory: \" + JSON.stringify(reducedChargeDaysHistory));\n\n} else {\n    // node.warn(\"Akku hat gestern keine 100% erreicht\");\n\n    // Wenn die Ladegrenze derzeit reduziert ist und die reduzierte Ladegrenze nicht kürzlich erreicht wurde, zurück auf max setzen\n    if (fullChargeThreshold !== maxChargeThreshold && !wasReducedChargeRecently()) {\n        fullChargeThreshold = maxChargeThreshold;\n        // node.warn(`🔄 Ladegrenze zurück auf ${maxChargeThreshold}% gesetzt`);\n\n        // ReducedChargeDays-History zurücksetzen\n        reducedChargeDaysHistory = [];\n        flow.set('reducedChargeDaysHistory', reducedChargeDaysHistory);\n        // node.warn(\"ReducedChargeDaysHistory wurde zurückgesetzt.\");\n    } else {\n        // node.warn(\"Ladegrenze bleibt unverändert bei \" + fullChargeThreshold + \"%\");\n    }\n}\n\n// Aktuelle Ladegrenze im Flow speichern\nglobal.set('FULL_CHARGE_THRESHOLD', fullChargeThreshold);\n// node.warn(\"Aktuelle Ladegrenze nach Setzen: \" + global.get('FULL_CHARGE_THRESHOLD'));\n\n// Nachricht zurückgeben\nmsg.payload = fullChargeThreshold;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 180,
        "wires": [
            [
                "159c0fd9407ddb0c"
            ]
        ]
    },
    {
        "id": "159c0fd9407ddb0c",
        "type": "ioBroker out",
        "z": "020dd469b36ad941",
        "g": "cd1a21266e4298d4",
        "name": "SOC Obergrenze setzen",
        "topic": "euerDatenpunkt.chargeLimit",
        "ack": "false",
        "autoCreate": "false",
        "stateName": "",
        "role": "",
        "payloadType": "",
        "readonly": "",
        "stateUnit": "",
        "stateMin": "",
        "stateMax": "",
        "x": 1050,
        "y": 220,
        "wires": []
    },
    {
        "id": "752440c759cd639a",
        "type": "link in",
        "z": "020dd469b36ad941",
        "g": "cd1a21266e4298d4",
        "name": "link in 89",
        "links": [
            "50f6609c7977589d",
            "47e45392a879640f"
        ],
        "x": 875,
        "y": 160,
        "wires": [
            [
                "eff6a96a9242c508",
                "dcfd7e455a269475"
            ]
        ]
    },
    {
        "id": "41a8016bcaacb1bd",
        "type": "inject",
        "z": "020dd469b36ad941",
        "g": "c3e801838d128007",
        "name": "Historie zurücksetzen",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 1080,
        "wires": [
            [
                "1a5ffaab5c8b9314"
            ]
        ]
    },
    {
        "id": "1a5ffaab5c8b9314",
        "type": "function",
        "z": "020dd469b36ad941",
        "g": "c3e801838d128007",
        "name": "Historie löschen",
        "func": "// Lösche die Historie und den letzten gespeicherten Tag\nflow.set('socHistory', []);\nflow.set('lastSavedDate', '');\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1080,
        "wires": [
            [
                "d7cd429fdfe65a06"
            ]
        ]
    },
    {
        "id": "d7cd429fdfe65a06",
        "type": "debug",
        "z": "020dd469b36ad941",
        "g": "c3e801838d128007",
        "name": "Debug Historie zurücksetzen",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 1080,
        "wires": []
    },
    {
        "id": "9df0ccab50ad4dcf",
        "type": "inject",
        "z": "020dd469b36ad941",
        "g": "c3e801838d128007",
        "name": "Historie anzeigen",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1120,
        "wires": [
            [
                "05e4efd36602a723"
            ]
        ]
    },
    {
        "id": "05e4efd36602a723",
        "type": "function",
        "z": "020dd469b36ad941",
        "g": "c3e801838d128007",
        "name": "Lese SOC Historie",
        "func": "// Hole die SOC Historie aus dem Flow Context\nlet socHistory = flow.get('socHistory') || [];\n\n// Gebe die Historie aus\nmsg.payload = socHistory;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1120,
        "wires": [
            [
                "b9965d527f6c0d43"
            ]
        ]
    },
    {
        "id": "b9965d527f6c0d43",
        "type": "debug",
        "z": "020dd469b36ad941",
        "g": "c3e801838d128007",
        "name": "SOC Historie",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 1120,
        "wires": []
    },
    {
        "id": "392c1653ba960118",
        "type": "inject",
        "z": "020dd469b36ad941",
        "g": "c3e801838d128007",
        "name": "Update SOC History",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 1160,
        "wires": [
            [
                "a6d810384aba9eaf"
            ]
        ]
    },
    {
        "id": "a6d810384aba9eaf",
        "type": "function",
        "z": "020dd469b36ad941",
        "g": "c3e801838d128007",
        "name": "Set SOC History to 100",
        "func": "// Hole das heutige Datum und die Zeit\nlet today = new Date();\nlet threeDaysAgo = new Date(today);\nthreeDaysAgo.setDate(today.getDate() - 3);\n\n// Historie abrufen\nlet socHistory = flow.get('socHistory') || [];\n\n// Setze den SOC für die letzten drei Tage auf 100%\nfor (let i = 0; i < 3; i++) {\n    let dateToSet = new Date(threeDaysAgo);\n    dateToSet.setDate(threeDaysAgo.getDate() + i);\n    \n    // Überprüfen, ob der Eintrag für dieses Datum bereits existiert\n    let existingEntryIndex = socHistory.findIndex(entry => \n        new Date(entry.time).toISOString().split('T')[0] === dateToSet.toISOString().split('T')[0]);\n    \n    if (existingEntryIndex !== -1) {\n        // Wenn der Eintrag bereits existiert, aktualisiere den Wert\n        socHistory[existingEntryIndex].value = 100;\n    } else {\n        // Ansonsten neuen Eintrag hinzufügen\n        socHistory.push({\n            time: dateToSet.toISOString(),\n            value: 100\n        });\n    }\n}\n\n// Begrenze die Historie auf die letzten 30 Einträge\nif (socHistory.length > 30) {\n    socHistory.shift(); // Entferne den ältesten Eintrag\n}\n\n// Speichere die aktualisierte Historie im Flow Context\nflow.set('socHistory', socHistory);\n\n// Gebe die Nachricht weiter\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 450,
        "y": 1160,
        "wires": [
            [
                "56aa407a3b1d5b4f"
            ]
        ]
    },
    {
        "id": "56aa407a3b1d5b4f",
        "type": "debug",
        "z": "020dd469b36ad941",
        "g": "c3e801838d128007",
        "name": "Debug SOC History",
        "active": true,
        "tosidebar": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 1160,
        "wires": []
    },
    {
        "id": "f7d98aaf7e4aa276",
        "type": "comment",
        "z": "020dd469b36ad941",
        "g": "c3e801838d128007",
        "name": "Manuelle Flows zum regeln der History nach reset ",
        "info": "",
        "x": 290,
        "y": 1040,
        "wires": []
    },
    {
        "id": "b5814e95e45c7be5",
        "type": "function",
        "z": "020dd469b36ad941",
        "g": "bc31f09bd4cc7f2f",
        "name": "Variablen setzen ",
        "func": "// Setze Konstanten im Flow (Ersetze die Werte mit deinen gewünschten Werten)\nflow.set('LOW_BATTERY_THRESHOLD', 10);  // Schwellenwert für niedrigen Akku\nflow.set('FULL_CHARGE_THRESHOLD', 100);  // Schwellenwert für volle Ladung\nglobal.set('FULL_CHARGE_THRESHOLD', 100);  // Schwellenwert für volle Ladung\nflow.set('NO_CHARGE_DAYS', 5);  // Anzahl der Tage ohne volle Ladung\nflow.set('MIN_OUTPUT_POWER', 30);  // Mindestleistung in Watt\nflow.set('MEDIUM_OUTPUT_POWER', 60);  // Mittlere Leistung in Watt\nflow.set('HIGH_OUTPUT_POWER', 90);  // Hohe Leistung in Watt\nflow.set('OUTPUT_POWER_THRESHOLD', 100);  // Schwelle für Leistung\nflow.set('MAX_OUTPUT_POWER', 830);  // Maximale Leistung\nflow.set('OUTPUT_POWER_STEP', 1);  // Schrittgröße\nflow.set('HYSTERESIS', 20);  // Hysterese in Watt\nflow.set('reducedChargeDays', 1); //Tage mit reduzierter Ladung\n\nflow.set('MIN_EINSPEISUNG', -150);  // Mindesteinspeisung in Watt\nflow.set('START_AC_LEISTUNG', 100);  // Startwert für AC-Ladung\nflow.set('MAX_AC_LEISTUNG', 900);  // Maximale AC-Leistung\nflow.set('MAX_GESAMTLEISTUNG', 1300);  // Maximale Gesamtleistung\nflow.set('LEISTUNGSSCHRITT', 1);  // Schrittweite für Leistung\nflow.set('ENT_PRELLZEIT', 60000);  // Entprellzeit (in Millisekunden)\nflow.set('SKALIERUNG', 1);  // Skalierung der Einspeisung\nflow.set('BATTERY_FULL_THRESHOLD', 100);  // Schwellenwert für vollen Akku\nflow.set('STEIGERUNGSSCHRITT', 100);  // Steigerung der Ladeleistung\nflow.set('ZIEL_NEGATIVE_LEISTUNG', -100);  // Zielwert für negative Einspeisung\n\n// Setze Fallback-Werte für 'lastSetPower' und 'socHistory', wenn diese nicht existieren\nflow.set('lastSetPower', flow.get('lastSetPower') || 0);  // Fallback auf 0, wenn nicht gesetzt\nflow.set('socHistory', flow.get('socHistory') || []);  // Fallback auf leeres Array, wenn nicht gesetzt\n\n// Rückgabe des ursprünglichen Messages, nachdem alle Variablen gesetzt wurden\nreturn msg;\n",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1300,
        "wires": []
    },
    {
        "id": "34a42c04883ba0f0",
        "type": "inject",
        "z": "020dd469b36ad941",
        "g": "bc31f09bd4cc7f2f",
        "name": "Bei neustart oder manuell",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 1300,
        "wires": [
            [
                "b5814e95e45c7be5"
            ]
        ]
    },
    {
        "id": "336b2047e95a448e",
        "type": "comment",
        "z": "020dd469b36ad941",
        "g": "bc31f09bd4cc7f2f",
        "name": "Flow variablen und Schwellenwerte setzen",
        "info": "",
        "x": 260,
        "y": 1260,
        "wires": []
    },
    {
        "id": "580381201b86df60",
        "type": "inject",
        "z": "020dd469b36ad941",
        "g": "bc31f09bd4cc7f2f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 1340,
        "wires": [
            [
                "ab68b32c31ca90fd"
            ]
        ]
    },
    {
        "id": "ab68b32c31ca90fd",
        "type": "function",
        "z": "020dd469b36ad941",
        "g": "bc31f09bd4cc7f2f",
        "name": "Flow variablen lesen",
        "func": "// Hole die Konstanten aus dem Flow\nconst lowBatteryThreshold = flow.get('LOW_BATTERY_THRESHOLD');\nconst fullChargeThreshold = flow.get('FULL_CHARGE_THRESHOLD');\nconst noChargeDays = flow.get('NO_CHARGE_DAYS');\nconst minOutputPower = flow.get('MIN_OUTPUT_POWER');\nconst mediumOutputPower = flow.get('MEDIUM_OUTPUT_POWER');\nconst highOutputPower = flow.get('HIGH_OUTPUT_POWER');\nconst outputPowerThreshold = flow.get('OUTPUT_POWER_THRESHOLD');\nconst maxOutputPower = flow.get('MAX_OUTPUT_POWER');\nconst outputPowerStep = flow.get('OUTPUT_POWER_STEP');\nconst hysteresis = flow.get('HYSTERESIS');\nconst minEinspeisung = flow.get('MIN_EINSPEISUNG');\nconst startACLeistung = flow.get('START_AC_LEISTUNG');\nconst maxACLeistung = flow.get('MAX_AC_LEISTUNG');\nconst maxGesamtLeistung = flow.get('MAX_GESAMTLEISTUNG');\nconst leistungsschritt = flow.get('LEISTUNGSSCHRITT');\nconst entPrellzeit = flow.get('ENT_PRELLZEIT');\nconst skalierung = flow.get('SKALIERUNG');\nconst batteryFullThreshold = flow.get('BATTERY_FULL_THRESHOLD');\nconst steigerschritt = flow.get('STEIGERUNGSSCHRITT');\nconst zielNegativeLeistung = flow.get('ZIEL_NEGATIVE_LEISTUNG');\nconst reducedChargeDays = flow.get('reducedChargeDays');\nconst lastSetPower = flow.get('lastSetPower');\nconst socHistory = flow.get('socHistory');\n\n// Sende alle Variablen an die Debug-Node\nmsg.payload = {\n    LOW_BATTERY_THRESHOLD: lowBatteryThreshold,\n    FULL_CHARGE_THRESHOLD: fullChargeThreshold,\n    NO_CHARGE_DAYS: noChargeDays,\n    MIN_OUTPUT_POWER: minOutputPower,\n    MEDIUM_OUTPUT_POWER: mediumOutputPower,\n    HIGH_OUTPUT_POWER: highOutputPower,\n    OUTPUT_POWER_THRESHOLD: outputPowerThreshold,\n    MAX_OUTPUT_POWER: maxOutputPower,\n    OUTPUT_POWER_STEP: outputPowerStep,\n    HYSTERESIS: hysteresis,\n    MIN_EINSPEISUNG: minEinspeisung,\n    START_AC_LEISTUNG: startACLeistung,\n    MAX_AC_LEISTUNG: maxACLeistung,\n    MAX_GESAMTLEISTUNG: maxGesamtLeistung,\n    LEISTUNGSSCHRITT: leistungsschritt,\n    ENT_PRELLZEIT: entPrellzeit,\n    SKALIERUNG: skalierung,\n    BATTERY_FULL_THRESHOLD: batteryFullThreshold,\n    STEIGERUNGSSCHRITT: steigerschritt,\n    ZIEL_NEGATIVE_LEISTUNG: zielNegativeLeistung,\n    TAGE_MIT_REDUZIERTER_LADUNG: reducedChargeDays,\n    LAST_SET_POWER: lastSetPower,\n    SOC_HISTORY: socHistory\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1340,
        "wires": [
            [
                "d1db0afd604e12e1"
            ]
        ]
    },
    {
        "id": "d1db0afd604e12e1",
        "type": "debug",
        "z": "020dd469b36ad941",
        "g": "bc31f09bd4cc7f2f",
        "name": "debug 20",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 1340,
        "wires": []
    },
    {
        "id": "8efd6e550967c215",
        "type": "comment",
        "z": "020dd469b36ad941",
        "g": "336629f1c18b63c0",
        "name": "Notlademodus",
        "info": "",
        "x": 210,
        "y": 680,
        "wires": []
    },
    {
        "id": "46e875f33513e9ac",
        "type": "change",
        "z": "020dd469b36ad941",
        "g": "336629f1c18b63c0",
        "name": "Ladeleistung Notmodus",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "900",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 760,
        "wires": [
            [
                "76c1aab072054bc4"
            ]
        ]
    },
    {
        "id": "b6dfa43f18f7b3fb",
        "type": "change",
        "z": "020dd469b36ad941",
        "g": "336629f1c18b63c0",
        "name": "Schalter auf 1 Notmodus",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 800,
        "wires": [
            [
                "f941ef879931afe3"
            ]
        ]
    },
    {
        "id": "f941ef879931afe3",
        "type": "ioBroker out",
        "z": "020dd469b36ad941",
        "g": "336629f1c18b63c0",
        "name": "AC Modus wechseln",
        "topic": "euerDatenpunkt.acMode",
        "ack": "false",
        "autoCreate": "false",
        "stateName": "",
        "role": "",
        "payloadType": "",
        "readonly": "",
        "stateUnit": "",
        "stateMin": "",
        "stateMax": "",
        "x": 820,
        "y": 820,
        "wires": []
    },
    {
        "id": "76c1aab072054bc4",
        "type": "ioBroker out",
        "z": "020dd469b36ad941",
        "g": "336629f1c18b63c0",
        "name": "ACE1500 Ladeleistung",
        "topic": "euerDatenpunkt.setInputLimit",
        "ack": "false",
        "autoCreate": "false",
        "stateName": "",
        "role": "",
        "payloadType": "",
        "readonly": "",
        "stateUnit": "",
        "stateMin": "",
        "stateMax": "",
        "x": 820,
        "y": 760,
        "wires": []
    },
    {
        "id": "9786da992176357f",
        "type": "switch",
        "z": "020dd469b36ad941",
        "g": "336629f1c18b63c0",
        "name": "Notlademodus",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "open",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "close",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 220,
        "y": 900,
        "wires": [
            [
                "f4f2db65d83ebd9b"
            ],
            [
                "b6dfa43f18f7b3fb",
                "938bd990165c50f1",
                "46e875f33513e9ac"
            ]
        ]
    },
    {
        "id": "f4f2db65d83ebd9b",
        "type": "change",
        "z": "020dd469b36ad941",
        "g": "336629f1c18b63c0",
        "name": "Normalbetrieb",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gate_control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "open",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 680,
        "wires": [
            [
                "be503290814cba50",
                "f3820c9345a5992c"
            ]
        ]
    },
    {
        "id": "938bd990165c50f1",
        "type": "change",
        "z": "020dd469b36ad941",
        "g": "336629f1c18b63c0",
        "name": "Block Normalbetrieb",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "close",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gate_control",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 720,
        "wires": [
            [
                "be503290814cba50",
                "f3820c9345a5992c"
            ]
        ]
    },
    {
        "id": "be503290814cba50",
        "type": "join",
        "z": "020dd469b36ad941",
        "g": "336629f1c18b63c0",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "1",
        "count": "1",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 730,
        "y": 700,
        "wires": [
            [
                "875260279e6abf48",
                "65fac77d13c9a690"
            ]
        ]
    },
    {
        "id": "f3820c9345a5992c",
        "type": "function",
        "z": "020dd469b36ad941",
        "g": "336629f1c18b63c0",
        "name": "Gate open? (Normalbetrieb)",
        "func": "// Prüfe, ob es schon eine Flagge für den Status \"open\" gibt\nif (global.get('gate_open') !== true && msg.payload === \"open\") {\n    // Setze die Ladeleistung auf 0\n    msg.payload = 0;\n\n    // Setze die Flagge auf \"true\", um zu verhindern, dass dies erneut passiert\n    global.set('gate_open', true);\n\n    return msg;\n} \n// Wenn der Zustand auf \"close\" wechselt, setze die Flagge zurück\nelse if (msg.payload === \"close\") {\n    global.set('gate_open', false);\n}\n\n// Falls der Zustand noch nicht gewechselt ist oder die Flagge gesetzt ist, nichts tun\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 840,
        "wires": [
            [
                "76c1aab072054bc4"
            ]
        ]
    },
    {
        "id": "875260279e6abf48",
        "type": "switch",
        "z": "020dd469b36ad941",
        "g": "336629f1c18b63c0",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "close",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 450,
        "y": 940,
        "wires": [
            [
                "c74a6d819f326e98"
            ]
        ]
    },
    {
        "id": "c74a6d819f326e98",
        "type": "change",
        "z": "020dd469b36ad941",
        "g": "336629f1c18b63c0",
        "name": "Stop",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 940,
        "wires": [
            [
                "771162acacbd6d3d"
            ]
        ]
    },
    {
        "id": "e636c982a8edcc88",
        "type": "comment",
        "z": "020dd469b36ad941",
        "g": "336629f1c18b63c0",
        "name": "Stopp entladen bis 12 Uhr ",
        "info": "",
        "x": 510,
        "y": 900,
        "wires": []
    },
    {
        "id": "5cffe1610931e636",
        "type": "link in",
        "z": "020dd469b36ad941",
        "g": "336629f1c18b63c0",
        "name": "link in 90",
        "links": [
            "50f6609c7977589d",
            "47e45392a879640f"
        ],
        "x": 95,
        "y": 740,
        "wires": [
            [
                "f598d95b0261933f"
            ]
        ]
    },
    {
        "id": "65fac77d13c9a690",
        "type": "link out",
        "z": "020dd469b36ad941",
        "g": "336629f1c18b63c0",
        "name": "Ausgang Notladen",
        "mode": "link",
        "links": [
            "4434a1b8c3db9122",
            "fd73b1b12ef06c5d",
            "5bd105eefa7470d6",
            "7ffd0158cd72f396"
        ],
        "x": 855,
        "y": 700,
        "wires": []
    },
    {
        "id": "771162acacbd6d3d",
        "type": "link out",
        "z": "020dd469b36ad941",
        "g": "336629f1c18b63c0",
        "name": "Gate nach Notladen",
        "mode": "link",
        "links": [
            "8987c067991842f8"
        ],
        "x": 985,
        "y": 880,
        "wires": []
    },
    {
        "id": "f598d95b0261933f",
        "type": "function",
        "z": "020dd469b36ad941",
        "g": "336629f1c18b63c0",
        "name": "minSOC berechnen",
        "func": "// Extrahiere die SOC-Werte aus msg.payload\nlet soc1 = msg.payload.SOC_1;\nlet soc2 = msg.payload.SOC_2;\nlet soc3 = msg.payload.SOC_3;\n\n// Berechne den kleinsten SOC-Wert\nlet minSOC = Math.min(soc1, soc2, soc3);\n\n// Hole den minVol-Wert aus msg.payload\nlet minVol = msg.payload.minVol;\n\n// Bereinige die Nachricht und reiche nur minSOC und minVol durch\nmsg.payload = {\n    minSOC: minSOC,\n    minVol: minVol\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 740,
        "wires": [
            [
                "22a60194b196276c"
            ]
        ]
    },
    {
        "id": "22a60194b196276c",
        "type": "function",
        "z": "020dd469b36ad941",
        "g": "336629f1c18b63c0",
        "name": "Gate auf oder zu ",
        "func": "let minSOC = Number(msg.payload.minSOC); // Sicherstellen, dass es eine Zahl ist\nlet minVol = Number(msg.payload.minVol); // Sicherstellen, dass es eine Zahl ist\n\n// Schwellenwerte\nlet socCloseThreshold = 7;\nlet socOpenThreshold = 20;\nlet volCloseThreshold = 2.9;\nlet volOpenThreshold = 3.2;\n\n// Überprüfen, ob das Gate gerade geöffnet werden soll\nif (minSOC <= socCloseThreshold || minVol <= volCloseThreshold) {\n    msg.payload = \"close\"; // Gate schließen (Notlademodus)\n} else if (minSOC >= socOpenThreshold && minVol >= volOpenThreshold) {\n    msg.payload = \"open\"; // Gate öffnen (Normalbetrieb)\n} else {\n    // Keine Änderung - Zustand bleibt wie er ist\n    msg.payload = null; // Keine Aktion, das Gate bleibt im aktuellen Modus\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 800,
        "wires": [
            [
                "9786da992176357f"
            ]
        ]
    },
    {
        "id": "33464fae3cfccb37",
        "type": "comment",
        "z": "020dd469b36ad941",
        "g": "5dfb2ca620f8ba32",
        "name": "Übergabe an HUB1200",
        "info": "",
        "x": 1360,
        "y": 400,
        "wires": []
    },
    {
        "id": "8c79f20645284fd6",
        "type": "ioBroker out",
        "z": "020dd469b36ad941",
        "g": "5dfb2ca620f8ba32",
        "name": "HUB 1200 Ausgangsleistung",
        "topic": "euerDatenpunkt.setOutputLimit",
        "ack": "false",
        "autoCreate": "false",
        "stateName": "",
        "role": "",
        "payloadType": "",
        "readonly": "",
        "stateUnit": "",
        "stateMin": "",
        "stateMax": "",
        "x": 1380,
        "y": 460,
        "wires": []
    },
    {
        "id": "fd59af521e79377f",
        "type": "ioBroker out",
        "z": "020dd469b36ad941",
        "g": "5dfb2ca620f8ba32",
        "name": "ACE1500 Ladeleistung",
        "topic": "euerDatenpunkt.setInputLimit",
        "ack": "false",
        "autoCreate": "false",
        "stateName": "",
        "role": "",
        "payloadType": "",
        "readonly": "",
        "stateUnit": "",
        "stateMin": "",
        "stateMax": "",
        "x": 1360,
        "y": 520,
        "wires": []
    },
    {
        "id": "ff54f943f776f3d7",
        "type": "ioBroker out",
        "z": "020dd469b36ad941",
        "g": "5dfb2ca620f8ba32",
        "name": "AC Modus wechseln",
        "topic": "euerDatenpunkt.acMode",
        "ack": "false",
        "autoCreate": "false",
        "stateName": "",
        "role": "",
        "payloadType": "",
        "readonly": "",
        "stateUnit": "",
        "stateMin": "",
        "stateMax": "",
        "x": 1360,
        "y": 580,
        "wires": []
    },
    {
        "id": "018a310f5d3a8d26",
        "type": "link in",
        "z": "020dd469b36ad941",
        "g": "5dfb2ca620f8ba32",
        "name": "link in 91",
        "links": [
            "7c2c306c4c850a63"
        ],
        "x": 1225,
        "y": 520,
        "wires": [
            [
                "fd59af521e79377f"
            ]
        ]
    },
    {
        "id": "6b6896d46b12929f",
        "type": "link in",
        "z": "020dd469b36ad941",
        "g": "5dfb2ca620f8ba32",
        "name": "link in 92",
        "links": [
            "e80ef258146890f3"
        ],
        "x": 1225,
        "y": 580,
        "wires": [
            [
                "ff54f943f776f3d7"
            ]
        ]
    },
    {
        "id": "7603986005ccd1dd",
        "type": "link in",
        "z": "020dd469b36ad941",
        "g": "5dfb2ca620f8ba32",
        "name": "link in 93",
        "links": [
            "71174763041f418f",
            "7254aa3b88f6e5d6"
        ],
        "x": 1225,
        "y": 460,
        "wires": [
            [
                "8c79f20645284fd6"
            ]
        ]
    },
    {
        "id": "fdba1bd01c4f8bc2",
        "type": "gate",
        "z": "020dd469b36ad941",
        "g": "ddbf43a7cc2b3d10",
        "name": "Normal oder Notbetrieb",
        "controlTopic": "gate_control",
        "defaultState": "open",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "default",
        "x": 690,
        "y": 520,
        "wires": [
            [
                "268fa24106c14510"
            ]
        ]
    },
    {
        "id": "2e8646cc463bea2e",
        "type": "gate",
        "z": "020dd469b36ad941",
        "g": "ddbf43a7cc2b3d10",
        "name": "Normal oder Notbetrieb",
        "controlTopic": "gate_control",
        "defaultState": "open",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "default",
        "x": 690,
        "y": 580,
        "wires": [
            [
                "e80ef258146890f3"
            ]
        ]
    },
    {
        "id": "837267556f523fe7",
        "type": "gate",
        "z": "020dd469b36ad941",
        "g": "ddbf43a7cc2b3d10",
        "name": "Normal oder Notbetrieb",
        "controlTopic": "gate_control",
        "defaultState": "open",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "default",
        "x": 690,
        "y": 460,
        "wires": [
            [
                "8fc042a90c184209"
            ]
        ]
    },
    {
        "id": "2a929dcdb775304c",
        "type": "comment",
        "z": "020dd469b36ad941",
        "g": "ddbf43a7cc2b3d10",
        "name": "Gate-Steuerung",
        "info": "",
        "x": 660,
        "y": 340,
        "wires": []
    },
    {
        "id": "8fc042a90c184209",
        "type": "gate",
        "z": "020dd469b36ad941",
        "g": "ddbf43a7cc2b3d10",
        "name": "Stopp",
        "controlTopic": "gate_control",
        "defaultState": "open",
        "openCmd": "false",
        "closeCmd": "true",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "default",
        "x": 990,
        "y": 400,
        "wires": [
            [
                "bea0051fe19d155c"
            ]
        ]
    },
    {
        "id": "5bd105eefa7470d6",
        "type": "link in",
        "z": "020dd469b36ad941",
        "g": "ddbf43a7cc2b3d10",
        "name": "link in 94",
        "links": [
            "d9eb5fcacf7b1c02",
            "65fac77d13c9a690",
            "0efe6d8135ded79c",
            "b6cb8ffa2bd2a69f",
            "48f14b4cf3da6205"
        ],
        "x": 535,
        "y": 460,
        "wires": [
            [
                "837267556f523fe7"
            ]
        ]
    },
    {
        "id": "fd73b1b12ef06c5d",
        "type": "link in",
        "z": "020dd469b36ad941",
        "g": "ddbf43a7cc2b3d10",
        "name": "link in 95",
        "links": [
            "5d029309973bf0f5",
            "65fac77d13c9a690",
            "3721fd3e28a55028",
            "b6cb8ffa2bd2a69f",
            "48f14b4cf3da6205"
        ],
        "x": 535,
        "y": 520,
        "wires": [
            [
                "fdba1bd01c4f8bc2"
            ]
        ]
    },
    {
        "id": "4434a1b8c3db9122",
        "type": "link in",
        "z": "020dd469b36ad941",
        "g": "ddbf43a7cc2b3d10",
        "name": "link in 96",
        "links": [
            "a78445aadd7b3e1c",
            "65fac77d13c9a690",
            "c5f8a54c9c154e23",
            "b6cb8ffa2bd2a69f",
            "48f14b4cf3da6205"
        ],
        "x": 535,
        "y": 580,
        "wires": [
            [
                "2e8646cc463bea2e"
            ]
        ]
    },
    {
        "id": "7c2c306c4c850a63",
        "type": "link out",
        "z": "020dd469b36ad941",
        "g": "ddbf43a7cc2b3d10",
        "name": "Laden Ausgang",
        "mode": "link",
        "links": [
            "018a310f5d3a8d26"
        ],
        "x": 1085,
        "y": 520,
        "wires": []
    },
    {
        "id": "e80ef258146890f3",
        "type": "link out",
        "z": "020dd469b36ad941",
        "g": "ddbf43a7cc2b3d10",
        "name": "AC Switch Ausgang ",
        "mode": "link",
        "links": [
            "6b6896d46b12929f"
        ],
        "x": 875,
        "y": 580,
        "wires": []
    },
    {
        "id": "bea0051fe19d155c",
        "type": "gate",
        "z": "020dd469b36ad941",
        "g": "ddbf43a7cc2b3d10",
        "name": "Manuel Stop",
        "controlTopic": "control",
        "defaultState": "open",
        "openCmd": "false",
        "closeCmd": "true",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "default",
        "x": 1010,
        "y": 340,
        "wires": [
            [
                "71174763041f418f"
            ]
        ]
    },
    {
        "id": "71174763041f418f",
        "type": "link out",
        "z": "020dd469b36ad941",
        "g": "ddbf43a7cc2b3d10",
        "name": "Entladen Ausgang",
        "mode": "link",
        "links": [
            "7603986005ccd1dd"
        ],
        "x": 1125,
        "y": 340,
        "wires": []
    },
    {
        "id": "f697cca0c42396cd",
        "type": "link in",
        "z": "020dd469b36ad941",
        "g": "ddbf43a7cc2b3d10",
        "name": "link in 97",
        "links": [
            "3c13f57a73e3f1c1"
        ],
        "x": 855,
        "y": 320,
        "wires": [
            [
                "bea0051fe19d155c"
            ]
        ]
    },
    {
        "id": "8987c067991842f8",
        "type": "link in",
        "z": "020dd469b36ad941",
        "g": "ddbf43a7cc2b3d10",
        "name": "link in 98",
        "links": [
            "771162acacbd6d3d",
            "20f917c242441452"
        ],
        "x": 855,
        "y": 400,
        "wires": [
            [
                "8fc042a90c184209"
            ]
        ]
    },
    {
        "id": "31f5f5048ecf4d44",
        "type": "comment",
        "z": "020dd469b36ad941",
        "g": "b116639d1cfd4f41",
        "name": "Trigger für Flow",
        "info": "",
        "x": 180,
        "y": 100,
        "wires": []
    },
    {
        "id": "94956350e8b5d570",
        "type": "inject",
        "z": "020dd469b36ad941",
        "g": "b116639d1cfd4f41",
        "name": "Alle 20 Sekunden",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 140,
        "wires": [
            [
                "59fca43fb6ce0407"
            ]
        ]
    },
    {
        "id": "93eadb933f37db46",
        "type": "link out",
        "z": "020dd469b36ad941",
        "g": "b116639d1cfd4f41",
        "name": "Ausgang Trigger Flow",
        "mode": "link",
        "links": [
            "39f7688f8a85951e",
            "69d4df643ca52151"
        ],
        "x": 435,
        "y": 140,
        "wires": []
    },
    {
        "id": "59fca43fb6ce0407",
        "type": "gate",
        "z": "020dd469b36ad941",
        "g": "b116639d1cfd4f41",
        "name": "STOP",
        "controlTopic": "control",
        "defaultState": "open",
        "openCmd": "false",
        "closeCmd": "true",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "default",
        "x": 350,
        "y": 140,
        "wires": [
            [
                "93eadb933f37db46"
            ]
        ]
    },
    {
        "id": "16c717c5c63893e0",
        "type": "link in",
        "z": "020dd469b36ad941",
        "g": "b116639d1cfd4f41",
        "name": "Eingang STOP",
        "links": [
            "0ffce5cb3e32238b",
            "dcf6ae60cc7cbbcf"
        ],
        "x": 325,
        "y": 100,
        "wires": [
            [
                "59fca43fb6ce0407"
            ]
        ]
    },
    {
        "id": "50f6609c7977589d",
        "type": "link out",
        "z": "020dd469b36ad941",
        "g": "ebda871312c2f825",
        "name": "Ausgang iobroker in",
        "mode": "link",
        "links": [
            "5cffe1610931e636",
            "752440c759cd639a",
            "a1ddbfe84222fcb9",
            "cafd47575ce8c14a",
            "ba4d8d7f23c3f580",
            "8be2dfa38f6009c2",
            "240016dc51a5ebf6",
            "085268425dce3c6f",
            "83e668928ed69cb3"
        ],
        "x": 325,
        "y": 300,
        "wires": []
    },
    {
        "id": "39f7688f8a85951e",
        "type": "link in",
        "z": "020dd469b36ad941",
        "g": "ebda871312c2f825",
        "name": "link in 99",
        "links": [
            "93eadb933f37db46"
        ],
        "x": 95,
        "y": 300,
        "wires": [
            [
                "89a87ccd7f46e6f9"
            ]
        ]
    },
    {
        "id": "379bbff511c04b12",
        "type": "comment",
        "z": "020dd469b36ad941",
        "g": "416e081e17ad8217",
        "name": "Funktionen Leistungsberrechnung",
        "info": "",
        "x": 300,
        "y": 400,
        "wires": []
    },
    {
        "id": "238d95873930344f",
        "type": "function",
        "z": "020dd469b36ad941",
        "g": "416e081e17ad8217",
        "name": "AC-Switch",
        "func": "// SOC History aus Flow-Kontext\nlet socHistory = flow.get('socHistory') || [];\n\n// Hole `isNight` aus dem globalen Kontext\nlet isNight = global.get('isNight');\n\n// Aktueller Schaltzustand (Relais) aus msg.payload – falls vorhanden\nlet currentSwitchState = msg.payload.switchState;\n\n// Hole den Schwellenwert für volle Ladung aus dem globalen Kontext\nlet fullChargeThresholdValue = global.get('FULL_CHARGE_THRESHOLD');\n\n// Berechne das heutige Datum als String (YYYY-MM-DD)\nlet today = new Date();\nlet todayStr = today.toISOString().split('T')[0];\n\n// Prüfe, ob in der SOC History ein Eintrag existiert,\n// dessen Wert den Schwellenwert erreicht oder überschritten hat\nconst fullChargeReached = socHistory.some(entry => {\n    return parseFloat(entry.value) >= parseFloat(fullChargeThresholdValue) &&\n           entry.time.split('T')[0] === todayStr;\n});\n\n// Bestimme den gewünschten Schaltzustand:\n// - Falls der SOC-History-Eintrag den Schwellenwert erreicht hat, bleibt das Relais auf 2 (Entladen).\n// - Ansonsten: Tagsüber (isNight === false) wird auf 1 (Laden) geschaltet, nachts auf 2 (Entladen).\nlet desiredState;\nif (fullChargeReached) {\n    desiredState = 2;\n} else {\n    desiredState = isNight ? 2 : 1;\n}\n\n// Nur einen Befehl senden, wenn der aktuelle Schaltzustand vom gewünschten Zustand abweicht:\nif (typeof currentSwitchState !== 'undefined' && currentSwitchState === desiredState) {\n    // Keine Änderung – sende nichts.\n    return null;\n} else {\n    msg.payload = desiredState;\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 580,
        "wires": [
            [
                "c5f8a54c9c154e23"
            ]
        ]
    },
    {
        "id": "fa30145de005e971",
        "type": "function",
        "z": "020dd469b36ad941",
        "g": "416e081e17ad8217",
        "name": "Berechnung entladen",
        "func": "// Konstanten aus den Flow-Variablen\nconst LOW_BATTERY_THRESHOLD = flow.get('LOW_BATTERY_THRESHOLD') || 20;            // z.B. 20%\nconst FULL_CHARGE_THRESHOLD = global.get('FULL_CHARGE_THRESHOLD') || 100;         // z.B. 98 oder 100%\nconst NO_CHARGE_DAYS        = flow.get('NO_CHARGE_DAYS') || 3;                    // z.B. 3 Tage\nconst MAX_DISCHARGE_POWER   = flow.get('MAX_OUTPUT_POWER') || 830;                // z.B. 830W\n\n// Eingangswerte\nconst batteryLevel      = msg.payload.batteryLevel;      \nconst socHistory        = flow.get('socHistory') || [];\nconst currentOutputLimit = msg.payload.OutputLimit;\n\n// Hole die `isNight`-Flag aus dem globalen Kontext\nconst isNight = global.get('isNight');\n\n// Prüfung der SOC‑History der letzten NO_CHARGE_DAYS\nlet today = new Date();\nlet threeDaysAgo = new Date(today);\nthreeDaysAgo.setDate(today.getDate() - NO_CHARGE_DAYS);\n\nconst recentEntries = socHistory.filter(entry =>\n    new Date(entry.time).getTime() > threeDaysAgo.getTime()\n);\n\nconst noFullChargeInThreeDays = recentEntries.every(entry =>\n    parseFloat(entry.value) < parseFloat(entry.threshold)\n);\n\n// Fall 1: Niedriger Batteriestand oder keine volle Ladung in den letzten NO_CHARGE_DAYS\nif (noFullChargeInThreeDays || batteryLevel <= LOW_BATTERY_THRESHOLD) {\n    if (currentOutputLimit === 0) {\n        return null;\n    }\n    msg.payload = 0;\n    flow.set('lastSetPower', 0);\n    return msg;\n}\n\n// Ermitteln des heutigen Datums als String (YYYY-MM-DD)\nconst todayStr = today.toISOString().split('T')[0];\n\n// Prüfen, ob für heute ein SOC-History-Eintrag existiert, der den Schwellenwert erreicht hat\nconst fullChargeToday = socHistory.some(entry =>\n    entry.time.split('T')[0] === todayStr &&\n    parseFloat(entry.value) >= parseFloat(FULL_CHARGE_THRESHOLD)\n);\n\n// Fall 2: Volle Ladung heute erreicht oder Nachtmodus aktiv\nif (fullChargeToday || isNight) {\n    if (currentOutputLimit === MAX_DISCHARGE_POWER) {\n        return null;\n    }\n    msg.payload = MAX_DISCHARGE_POWER;\n    flow.set('lastSetPower', MAX_DISCHARGE_POWER);\n    return msg;\n}\n\n// Fall 3: Tagsüber, keine volle Ladung erreicht, keine Entladung\nif (!isNight) {\n    if (currentOutputLimit === 0) {\n        return null;\n    }\n    msg.payload = 0;\n    flow.set('lastSetPower', 0);\n    return msg;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 460,
        "wires": [
            [
                "0efe6d8135ded79c"
            ]
        ]
    },
    {
        "id": "ac9ed8ecdd1d16fd",
        "type": "function",
        "z": "020dd469b36ad941",
        "g": "416e081e17ad8217",
        "name": "Berechnung laden",
        "func": "// Notwendige Flow-Variablen einlesen\nlet START_AC_LEISTUNG      = flow.get('START_AC_LEISTUNG');      // Startwert für AC-Ladung\nlet MAX_AC_LEISTUNG        = flow.get('MAX_AC_LEISTUNG');        // Maximale AC-Leistung\nlet SKALIERUNG             = flow.get('SKALIERUNG');             // Skalierung der Einspeisung\nlet ZIEL_NEGATIVE_LEISTUNG = flow.get('ZIEL_NEGATIVE_LEISTUNG'); // Zielwert für negative Einspeisung\n\n// Schwellenwert für volle Ladung aus dem globalen Kontext holen\nlet FULL_CHARGE_THRESHOLD = global.get('FULL_CHARGE_THRESHOLD') || 100;\n\n// Eingangswerte aus msg.payload\nlet currentpower = msg.payload.currentPower;    // Aktuelle Einspeisung (negativ bei Einspeisung)\nlet batteryLevel = msg.payload.batteryLevel;    // Aktueller Ladezustand des Akkus\n\n// Prüfen, ob wichtige Werte vorhanden sind\nif (typeof currentpower === 'undefined' || typeof batteryLevel === 'undefined') {\n    msg.payload = 0;  // Ladeleistung auf 0 setzen, falls kritische Daten fehlen\n    return msg;\n}\n\n// Prüfen, ob es Nacht ist, mithilfe der isNight-Flag\nlet isNight = global.get('isNight');\n\n// SOC History aus dem Flow-Kontext abrufen\nlet socHistory = flow.get('socHistory') || [];\nlet todayStr = new Date().toISOString().split('T')[0];\n\n// Prüfen, ob der Schwellenwert für volle Ladung heute bereits erreicht wurde\nlet fullChargeReached = socHistory.some(entry => {\n    return entry.time.split('T')[0] === todayStr &&\n           parseFloat(entry.value) >= parseFloat(FULL_CHARGE_THRESHOLD);\n});\n\n// Fall: Nachts laden wir nicht\nif (isNight) {\n    msg.payload = 0;\n    context.set('currentACLeistung', 0);  // Reset für den nächsten Tag\n    return msg;\n}\n\n// Fall: Schwellenwert für volle Ladung bereits erreicht\nif (fullChargeReached || batteryLevel >= FULL_CHARGE_THRESHOLD) {\n    msg.payload = 0;\n    return msg;\n}\n\n// Berechnung der Differenz zwischen aktueller Einspeisung und Zielwert\nlet deltaPower = currentpower - ZIEL_NEGATIVE_LEISTUNG;\n\n// Ermitteln der aktuellen AC-Leistung aus dem Kontext, ansonsten START_AC_LEISTUNG verwenden\nlet newACLeistung = context.get('currentACLeistung') || START_AC_LEISTUNG;\n\nif (currentpower <= ZIEL_NEGATIVE_LEISTUNG) {\n    // Wenn wir mehr einspeisen als gewünscht – Ladeleistung erhöhen\n    let requiredPowerChange = Math.abs(deltaPower) * SKALIERUNG;\n    newACLeistung += requiredPowerChange;\n} else {\n    // Wenn wir weniger einspeisen oder Strom beziehen – Ladeleistung reduzieren\n    let requiredPowerChange = deltaPower * SKALIERUNG;\n    newACLeistung -= requiredPowerChange;\n}\n\n// Begrenzen der AC-Leistung zwischen 0 und MAX_AC_LEISTUNG\nnewACLeistung = Math.max(0, Math.min(newACLeistung, MAX_AC_LEISTUNG));\n\n// Speichern der berechneten AC-Leistung im Kontext für den nächsten Durchlauf\ncontext.set('currentACLeistung', newACLeistung);\n\n// Ausgabe: Ladeleistung, gerundet auf ganze Watt\nmsg.payload = Math.round(newACLeistung);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 520,
        "wires": [
            [
                "3721fd3e28a55028"
            ]
        ]
    },
    {
        "id": "8be2dfa38f6009c2",
        "type": "link in",
        "z": "020dd469b36ad941",
        "g": "416e081e17ad8217",
        "name": "link in 100",
        "links": [
            "50f6609c7977589d",
            "47e45392a879640f"
        ],
        "x": 95,
        "y": 520,
        "wires": [
            [
                "fa30145de005e971",
                "ac9ed8ecdd1d16fd",
                "238d95873930344f"
            ]
        ]
    },
    {
        "id": "0efe6d8135ded79c",
        "type": "link out",
        "z": "020dd469b36ad941",
        "g": "416e081e17ad8217",
        "name": "Entladen",
        "mode": "link",
        "links": [
            "5bd105eefa7470d6"
        ],
        "x": 425,
        "y": 460,
        "wires": []
    },
    {
        "id": "3721fd3e28a55028",
        "type": "link out",
        "z": "020dd469b36ad941",
        "g": "416e081e17ad8217",
        "name": "Laden",
        "mode": "link",
        "links": [
            "fd73b1b12ef06c5d"
        ],
        "x": 425,
        "y": 520,
        "wires": []
    },
    {
        "id": "c5f8a54c9c154e23",
        "type": "link out",
        "z": "020dd469b36ad941",
        "g": "416e081e17ad8217",
        "name": "AC-Switch",
        "mode": "link",
        "links": [
            "4434a1b8c3db9122"
        ],
        "x": 425,
        "y": 580,
        "wires": []
    },
    {
        "id": "ce08ef40adcd574e",
        "type": "ioBroker in",
        "z": "020dd469b36ad941",
        "g": "c19c7b861b47dfc5",
        "name": "Notladen manuell",
        "attrname": "payload",
        "topic": "0_userdata.0.Steuerung.AC_Notladen_Start",
        "payloadType": "value",
        "onlyack": "",
        "func": "all",
        "gap": "",
        "fireOnStart": "true",
        "outFormat": "MQTT",
        "x": 1680,
        "y": 300,
        "wires": [
            [
                "c9cbe4e64fd7e6e8"
            ]
        ]
    },
    {
        "id": "c9cbe4e64fd7e6e8",
        "type": "subflow:b3248e9c51eda898",
        "z": "020dd469b36ad941",
        "g": "c19c7b861b47dfc5",
        "name": "Manuelles Notladen",
        "x": 1880,
        "y": 300,
        "wires": [
            [
                "0ffce5cb3e32238b"
            ]
        ]
    },
    {
        "id": "706d094ff3994714",
        "type": "comment",
        "z": "020dd469b36ad941",
        "g": "c19c7b861b47dfc5",
        "name": "Manuelles Notladen",
        "info": "",
        "x": 1690,
        "y": 240,
        "wires": []
    },
    {
        "id": "0ffce5cb3e32238b",
        "type": "link out",
        "z": "020dd469b36ad941",
        "g": "c19c7b861b47dfc5",
        "name": "link out 11",
        "mode": "link",
        "links": [
            "16c717c5c63893e0"
        ],
        "x": 2015,
        "y": 300,
        "wires": []
    },
    {
        "id": "ff4bd3ee12bb84ca",
        "type": "ioBroker in",
        "z": "020dd469b36ad941",
        "g": "1434d9cebc1326ec",
        "name": "Stop entladen",
        "attrname": "payload",
        "topic": "0_userdata.0.Steuerung.Entladen_Stop",
        "payloadType": "value",
        "onlyack": "",
        "func": "all",
        "gap": "",
        "fireOnStart": "true",
        "outFormat": "MQTT",
        "x": 1670,
        "y": 140,
        "wires": [
            [
                "45aca6a7eeed575d"
            ]
        ]
    },
    {
        "id": "0cc84d8010107dd0",
        "type": "comment",
        "z": "020dd469b36ad941",
        "g": "1434d9cebc1326ec",
        "name": "Manueller Entladestop",
        "info": "",
        "x": 1700,
        "y": 80,
        "wires": []
    },
    {
        "id": "45aca6a7eeed575d",
        "type": "subflow:1d1461f6e2076192",
        "z": "020dd469b36ad941",
        "g": "1434d9cebc1326ec",
        "name": "",
        "x": 1860,
        "y": 140,
        "wires": [
            [
                "3c13f57a73e3f1c1"
            ]
        ]
    },
    {
        "id": "3c13f57a73e3f1c1",
        "type": "link out",
        "z": "020dd469b36ad941",
        "g": "1434d9cebc1326ec",
        "name": "Manueller Entladestop",
        "mode": "link",
        "links": [
            "f697cca0c42396cd"
        ],
        "x": 1995,
        "y": 140,
        "wires": []
    },
    {
        "id": "20f8e63bd7445519",
        "type": "ioBroker in",
        "z": "020dd469b36ad941",
        "g": "2d37ba3ce29b1824",
        "name": "Stopp Zendure",
        "attrname": "payload",
        "topic": "0_userdata.0.Steuerung.Zendure_Flow_Stop",
        "payloadType": "value",
        "onlyack": "",
        "func": "all",
        "gap": "",
        "fireOnStart": "true",
        "outFormat": "MQTT",
        "x": 1680,
        "y": 460,
        "wires": [
            [
                "7846f426ea243804"
            ]
        ]
    },
    {
        "id": "7846f426ea243804",
        "type": "subflow:99a57f0ac196b1b7",
        "z": "020dd469b36ad941",
        "g": "2d37ba3ce29b1824",
        "name": "Stop Zendure",
        "x": 1860,
        "y": 460,
        "wires": [
            [
                "dcf6ae60cc7cbbcf"
            ]
        ]
    },
    {
        "id": "f71f323561fea322",
        "type": "comment",
        "z": "020dd469b36ad941",
        "g": "2d37ba3ce29b1824",
        "name": "STOP Zendure",
        "info": "",
        "x": 1680,
        "y": 400,
        "wires": []
    },
    {
        "id": "dcf6ae60cc7cbbcf",
        "type": "link out",
        "z": "020dd469b36ad941",
        "g": "2d37ba3ce29b1824",
        "name": "link out 12",
        "mode": "link",
        "links": [
            "16c717c5c63893e0"
        ],
        "x": 1975,
        "y": 460,
        "wires": []
    },
    {
        "id": "2b55c806bec293a1",
        "type": "ioBroker in",
        "z": "020dd469b36ad941",
        "g": "9335832ed1f262f3",
        "name": "Zendure schlecht Wetter",
        "attrname": "payload",
        "topic": "0_userdata.0.Steuerung.Zendure_schlecht_Wetter",
        "payloadType": "value",
        "onlyack": "",
        "func": "all",
        "gap": "",
        "fireOnStart": "true",
        "outFormat": "MQTT",
        "x": 1710,
        "y": 600,
        "wires": [
            [
                "3eca682db667aedd"
            ]
        ]
    },
    {
        "id": "41c4d13beec1cc24",
        "type": "comment",
        "z": "020dd469b36ad941",
        "g": "9335832ed1f262f3",
        "name": "Sommer/Winterbetrieb SOC 10/30%",
        "info": "",
        "x": 1740,
        "y": 560,
        "wires": []
    },
    {
        "id": "3eca682db667aedd",
        "type": "function",
        "z": "020dd469b36ad941",
        "g": "9335832ed1f262f3",
        "name": "Check Sommer oder Winter ",
        "func": "// Annahme: msg.payload enthält die Information, ob es Winter (true) oder Sommer (false) ist\nvar threshold = (msg.payload === true) ? 30 : 10; // Winter = 30, Sommer = 10\nvar noChargeDays = (msg.payload === true) ? 3 : 5; // Winter = 3 Tage, Sommer = 5 Tage\n\n// Flow-Variablen setzen\nflow.set('LOW_BATTERY_THRESHOLD', threshold);\nflow.set('NO_CHARGE_DAYS', noChargeDays);\n\n// Nur den SOC (threshold) in msg.payload für den Output setzen\nmsg.payload = threshold;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1960,
        "y": 600,
        "wires": [
            [
                "abf97d0a293d4ef5"
            ]
        ]
    },
    {
        "id": "abf97d0a293d4ef5",
        "type": "ioBroker out",
        "z": "020dd469b36ad941",
        "g": "9335832ed1f262f3",
        "name": "Entladelimit in %",
        "topic": "euerDatenpunkt.dischargeLimit",
        "ack": "false",
        "autoCreate": "false",
        "stateName": "",
        "role": "",
        "payloadType": "",
        "readonly": "",
        "stateUnit": "",
        "stateMin": "",
        "stateMax": "",
        "x": 1930,
        "y": 640,
        "wires": []
    },
    {
        "id": "ac098a2261219426",
        "type": "ioBroker in",
        "z": "020dd469b36ad941",
        "g": "c4aca8aa58ccff5e",
        "name": "Stop Laden",
        "attrname": "payload",
        "topic": "0_userdata.0.Steuerung.Laden_Stop",
        "payloadType": "value",
        "onlyack": "",
        "func": "all",
        "gap": "",
        "fireOnStart": "true",
        "outFormat": "MQTT",
        "x": 1670,
        "y": 800,
        "wires": [
            [
                "5f11a6ba1c54127d"
            ]
        ]
    },
    {
        "id": "322f81df55f41c80",
        "type": "comment",
        "z": "020dd469b36ad941",
        "g": "c4aca8aa58ccff5e",
        "name": "Manueller Ladestop",
        "info": "",
        "x": 1690,
        "y": 740,
        "wires": []
    },
    {
        "id": "268fa24106c14510",
        "type": "gate",
        "z": "020dd469b36ad941",
        "g": "ddbf43a7cc2b3d10",
        "name": "Laden Stop",
        "controlTopic": "control",
        "defaultState": "open",
        "openCmd": "false",
        "closeCmd": "true",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "default",
        "x": 970,
        "y": 520,
        "wires": [
            [
                "7c2c306c4c850a63"
            ]
        ]
    },
    {
        "id": "3f05dbb61374556b",
        "type": "link in",
        "z": "020dd469b36ad941",
        "g": "ddbf43a7cc2b3d10",
        "name": "link in 101",
        "links": [
            "bb0e73f12b613cd7"
        ],
        "x": 855,
        "y": 480,
        "wires": [
            [
                "268fa24106c14510"
            ]
        ]
    },
    {
        "id": "bb0e73f12b613cd7",
        "type": "link out",
        "z": "020dd469b36ad941",
        "g": "c4aca8aa58ccff5e",
        "name": "Manueller Ladestop Ausgang ",
        "mode": "link",
        "links": [
            "3f05dbb61374556b"
        ],
        "x": 1975,
        "y": 800,
        "wires": []
    },
    {
        "id": "5f11a6ba1c54127d",
        "type": "subflow:4b7c801ae4eded37",
        "z": "020dd469b36ad941",
        "g": "c4aca8aa58ccff5e",
        "name": "Manueller Ladestop",
        "x": 1850,
        "y": 800,
        "wires": [
            [
                "bb0e73f12b613cd7"
            ]
        ]
    },
    {
        "id": "9a3b6d4bdec8130d",
        "type": "ioBroker in",
        "z": "020dd469b36ad941",
        "g": "1882fa1ccbe60c1a",
        "name": "ByPass an/aus",
        "attrname": "payload",
        "topic": "euerDatenpunkt.pass",
        "payloadType": "value",
        "onlyack": "",
        "func": "all",
        "gap": "",
        "fireOnStart": "true",
        "outFormat": "MQTT",
        "x": 1680,
        "y": 940,
        "wires": [
            [
                "1f178389ce250c60"
            ]
        ]
    },
    {
        "id": "1f178389ce250c60",
        "type": "subflow:c40c1e43832f39ef",
        "z": "020dd469b36ad941",
        "g": "1882fa1ccbe60c1a",
        "name": "",
        "x": 1840,
        "y": 940,
        "wires": []
    },
    {
        "id": "80a410983927788a",
        "type": "comment",
        "z": "020dd469b36ad941",
        "g": "1882fa1ccbe60c1a",
        "name": "DPL Steuerung nach ByPass",
        "info": "",
        "x": 1720,
        "y": 900,
        "wires": []
    },
    {
        "id": "89a87ccd7f46e6f9",
        "type": "subflow:2068e9152daab042",
        "z": "020dd469b36ad941",
        "g": "ebda871312c2f825",
        "name": "",
        "x": 210,
        "y": 300,
        "wires": [
            [
                "50f6609c7977589d"
            ]
        ]
    },
    {
        "id": "2a1ea16a58a81f5e",
        "type": "comment",
        "z": "020dd469b36ad941",
        "g": "ebda871312c2f825",
        "name": "Werte von ioBroker holen",
        "info": "",
        "x": 190,
        "y": 240,
        "wires": []
    },
    {
        "id": "54871e9574e1a7f4",
        "type": "function",
        "z": "020dd469b36ad941",
        "g": "4768669e8ab42ccf",
        "name": "Is Night True/False",
        "func": "// Hole die Sonnenzeit-Werte als Strings (hh:mm) aus msg.payload\nlet sunriseTime = msg.payload.sunriseTimestamp; // Format hh:mm\nlet sunsetTime = msg.payload.sunsetTimestamp;   // Format hh:mm\n\n// Absicherung: Prüfe, ob beide Werte korrekt vorhanden sind\nif (!sunriseTime || !sunsetTime || !sunriseTime.includes(':') || !sunsetTime.includes(':')) {\n    node.error(\"Fehler: Sonnenzeitangaben fehlen oder haben ein ungültiges Format.\");\n    return null;\n}\n\n// Aktuelle Zeit\nlet currentTime = new Date();\n\n// Konvertiere die Zeiten in vollständige Date-Objekte\nlet [sunriseHour, sunriseMinute] = sunriseTime.split(':').map(Number);\nlet sunriseDate = new Date(currentTime.getFullYear(), currentTime.getMonth(), currentTime.getDate(), sunriseHour, sunriseMinute);\n\nlet [sunsetHour, sunsetMinute] = sunsetTime.split(':').map(Number);\nlet sunsetDate = new Date(currentTime.getFullYear(), currentTime.getMonth(), currentTime.getDate(), sunsetHour, sunsetMinute);\n\n// Logik zur Bestimmung von isNight\nif (currentTime >= sunsetDate || currentTime < sunriseDate) {\n    global.set('isNight', true);  // Schreibe das globale Flag\n    node.status({ fill: \"blue\", shape: \"dot\", text: \"Night: true\" });\n} else {\n    global.set('isNight', false); // Schreibe das globale Flag\n    node.status({ fill: \"yellow\", shape: \"dot\", text: \"Night: false\" });\n}\n\n// Keine Ausgabe erforderlich, die Node ist rein funktional\nreturn null;\n",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 220,
        "wires": []
    },
    {
        "id": "085268425dce3c6f",
        "type": "link in",
        "z": "020dd469b36ad941",
        "g": "4768669e8ab42ccf",
        "name": "link in 102",
        "links": [
            "50f6609c7977589d"
        ],
        "x": 535,
        "y": 220,
        "wires": [
            [
                "54871e9574e1a7f4"
            ]
        ]
    },
    {
        "id": "c23474f9f0e39ca5",
        "type": "comment",
        "z": "020dd469b36ad941",
        "g": "4768669e8ab42ccf",
        "name": "Tag/Nacht Check",
        "info": "",
        "x": 680,
        "y": 180,
        "wires": []
    },
    {
        "id": "fdc82232e11ad6e0",
        "type": "function",
        "z": "020dd469b36ad941",
        "g": "336629f1c18b63c0",
        "name": "SOC min 50%",
        "func": "if (msg.payload.batteryLevel >= 50) {\n    msg.payload = false; // Öffne das Gate\n    msg.topic = \"gate_control\"; // Setze das Topic\n    return msg;\n} else {\n    return null; // Keine Änderung am Gate\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 940,
        "wires": [
            [
                "771162acacbd6d3d"
            ]
        ]
    },
    {
        "id": "83e668928ed69cb3",
        "type": "link in",
        "z": "020dd469b36ad941",
        "g": "336629f1c18b63c0",
        "name": "link in 103",
        "links": [
            "50f6609c7977589d"
        ],
        "x": 745,
        "y": 940,
        "wires": [
            [
                "fdc82232e11ad6e0"
            ]
        ]
    }
]